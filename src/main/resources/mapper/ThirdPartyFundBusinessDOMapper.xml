<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunche.loan.mapper.ThirdPartyFundBusinessDOMapper">
    <resultMap id="BaseResultMap" type="com.yunche.loan.domain.entity.ThirdPartyFundBusinessDO">
        <id column="bridge_procecss_id" jdbcType="BIGINT" property="bridgeProcecssId" />
        <result column="order_id" jdbcType="BIGINT" property="orderId" />
        <result column="lend_date" jdbcType="TIMESTAMP" property="lendDate" />
        <result column="repay_type" jdbcType="TINYINT" property="repayType" />
        <result column="repay_date" jdbcType="TIMESTAMP" property="repayDate" />
        <result column="repay_remark" jdbcType="VARCHAR" property="repayRemark" />
        <result column="interest" jdbcType="DECIMAL" property="interest" />
        <result column="poundage" jdbcType="DECIMAL" property="poundage" />
        <result column="repay_interest_date" jdbcType="TIMESTAMP" property="repayInterestDate" />
        <result column="repay_register_remark" jdbcType="VARCHAR" property="repayRegisterRemark" />
        <result column="lend_status" jdbcType="TINYINT" property="lendStatus" />
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
        <result column="gmt_modify" jdbcType="TIMESTAMP" property="gmtModify" />
        <result column="lend_amount" jdbcType="DECIMAL" property="lendAmount" />
        <result column="operation_man" jdbcType="VARCHAR" property="operationMan" />
    </resultMap>
    <sql id="Base_Column_List">
        bridge_procecss_id, order_id, lend_date, repay_type, repay_date, repay_remark, interest,
        poundage, repay_interest_date, repay_register_remark, lend_status, gmt_create, gmt_modify,lend_amount,operation_man
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from third_party_fund_business
        where bridge_procecss_id = #{bridgeProcecssId,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from third_party_fund_business
        where bridge_procecss_id = #{bridgeProcecssId,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.yunche.loan.domain.entity.ThirdPartyFundBusinessDO">
        insert into third_party_fund_business (bridge_procecss_id, order_id, lend_date,
        repay_type, repay_date, repay_remark,
        interest, poundage, repay_interest_date,
        repay_register_remark, lend_status, gmt_create,
        gmt_modify,lend_amount,operation_man)
        values (#{bridgeProcecssId,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT}, #{lendDate,jdbcType=TIMESTAMP},
        #{repayType,jdbcType=TINYINT}, #{repayDate,jdbcType=TIMESTAMP}, #{repayRemark,jdbcType=VARCHAR},
        #{interest,jdbcType=DECIMAL}, #{poundage,jdbcType=DECIMAL}, #{repayInterestDate,jdbcType=TIMESTAMP},
        #{repayRegisterRemark,jdbcType=VARCHAR}, #{lendStatus,jdbcType=TINYINT}, #{gmtCreate,jdbcType=TIMESTAMP},
        #{gmtModify,jdbcType=TIMESTAMP},#{lendAmount,jdbcType=DECIMAL}, #{operationMan,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.yunche.loan.domain.entity.ThirdPartyFundBusinessDO">
        insert into third_party_fund_business
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="bridgeProcecssId != null">
                bridge_procecss_id,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="lendDate != null">
                lend_date,
            </if>
            <if test="repayType != null">
                repay_type,
            </if>
            <if test="repayDate != null">
                repay_date,
            </if>
            <if test="repayRemark != null">
                repay_remark,
            </if>
            <if test="interest != null">
                interest,
            </if>
            <if test="poundage != null">
                poundage,
            </if>
            <if test="repayInterestDate != null">
                repay_interest_date,
            </if>
            <if test="repayRegisterRemark != null">
                repay_register_remark,
            </if>
            <if test="lendStatus != null">
                lend_status,
            </if>
            <if test="gmtCreate != null">
                gmt_create,
            </if>
            <if test="gmtModify != null">
                gmt_modify,
            </if>
            <if test="lendAmount != null">
                lend_amount,
            </if>
            <if test="operationMan != null">
                operation_man,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="bridgeProcecssId != null">
                #{bridgeProcecssId,jdbcType=BIGINT},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=BIGINT},
            </if>
            <if test="lendDate != null">
                #{lendDate,jdbcType=TIMESTAMP},
            </if>
            <if test="repayType != null">
                #{repayType,jdbcType=TINYINT},
            </if>
            <if test="repayDate != null">
                #{repayDate,jdbcType=TIMESTAMP},
            </if>
            <if test="repayRemark != null">
                #{repayRemark,jdbcType=VARCHAR},
            </if>
            <if test="interest != null">
                #{interest,jdbcType=DECIMAL},
            </if>
            <if test="poundage != null">
                #{poundage,jdbcType=DECIMAL},
            </if>
            <if test="repayInterestDate != null">
                #{repayInterestDate,jdbcType=TIMESTAMP},
            </if>
            <if test="repayRegisterRemark != null">
                #{repayRegisterRemark,jdbcType=VARCHAR},
            </if>
            <if test="lendStatus != null">
                #{lendStatus,jdbcType=TINYINT},
            </if>
            <if test="gmtCreate != null">
                #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModify != null">
                #{gmtModify,jdbcType=TIMESTAMP},
            </if>
            <if test="lendAmount != null">
                #{lendAmount,jdbcType=DECIMAL},
            </if>
            <if test="operationMan != null">
                #{operation_man,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.yunche.loan.domain.entity.ThirdPartyFundBusinessDO">
        update third_party_fund_business
        <set>
            <if test="orderId != null">
                order_id = #{orderId,jdbcType=BIGINT},
            </if>
            <if test="lendDate != null">
                lend_date = #{lendDate,jdbcType=TIMESTAMP},
            </if>
            <if test="repayType != null">
                repay_type = #{repayType,jdbcType=TINYINT},
            </if>
            <if test="repayDate != null">
                repay_date = #{repayDate,jdbcType=TIMESTAMP},
            </if>
            <if test="repayRemark != null">
                repay_remark = #{repayRemark,jdbcType=VARCHAR},
            </if>
            <if test="interest != null">
                interest = #{interest,jdbcType=DECIMAL},
            </if>
            <if test="poundage != null">
                poundage = #{poundage,jdbcType=DECIMAL},
            </if>
            <if test="repayInterestDate != null">
                repay_interest_date = #{repayInterestDate,jdbcType=TIMESTAMP},
            </if>
            <if test="repayRegisterRemark != null">
                repay_register_remark = #{repayRegisterRemark,jdbcType=VARCHAR},
            </if>
            <if test="lendStatus != null">
                lend_status = #{lendStatus,jdbcType=TINYINT},
            </if>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModify != null">
                gmt_modify = #{gmtModify,jdbcType=TIMESTAMP},
            </if>
            <if test="lendAmount != null">
                lend_amount = #{lendAmount,jdbcType=DECIMAL},
            </if>
            <if test="operationMan != null">
                operation_man = #{operationMan,jdbcType=VARCHAR},
            </if>
        </set>
        where bridge_procecss_id = #{bridgeProcecssId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yunche.loan.domain.entity.ThirdPartyFundBusinessDO">
        update third_party_fund_business
        set order_id = #{orderId,jdbcType=BIGINT},
        lend_date = #{lendDate,jdbcType=TIMESTAMP},
        repay_type = #{repayType,jdbcType=TINYINT},
        repay_date = #{repayDate,jdbcType=TIMESTAMP},
        repay_remark = #{repayRemark,jdbcType=VARCHAR},
        interest = #{interest,jdbcType=DECIMAL},
        poundage = #{poundage,jdbcType=DECIMAL},
        repay_interest_date = #{repayInterestDate,jdbcType=TIMESTAMP},
        repay_register_remark = #{repayRegisterRemark,jdbcType=VARCHAR},
        lend_status = #{lendStatus,jdbcType=TINYINT},
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
        gmt_modify = #{gmtModify,jdbcType=TIMESTAMP},
        lend_amount = #{lendAmount,jdbcType=DECIMAL},
        operation_man = #{operationMan,jdbcType=VARCHAR}
        where bridge_procecss_id = #{bridgeProcecssId,jdbcType=BIGINT}
    </update>

    <update id="updateInfo">
        UPDATE third_party_fund_business
        SET  repay_date = #{repayDate},
              interest = #{interest},
              poundage = #{poundage},
              repay_type = 1
        WHERE
	order_id = #{orderId}
    </update>


    <!-- batchInsert -->
    <insert id="batchInsert" parameterType="java.util.List">
        insert into third_party_fund_business (bridge_procecss_id, order_id, lend_date, repay_type,
        repay_date, repay_remark, interest,
        poundage, repay_interest_date, repay_register_remark,lend_status,
        gmt_create, gmt_modify,lend_amount,operation_man)
        values
        <foreach collection="list" item="item" index="index">
            (#{item.bridgeProcecssId,jdbcType=BIGINT},
            #{item.orderId,jdbcType=BIGINT}, #{item.lendDate,jdbcType=TIMESTAMP},
            #{item.repayType,jdbcType=TINYINT},
            #{item.repayDate,jdbcType=TIMESTAMP},#{item.repayRemark,jdbcType=VARCHAR},
            #{item.interest,jdbcType=DECIMAL},
            #{item.poundage,jdbcType=DECIMAL},#{item.repayInterestDate,jdbcType=TIMESTAMP},
            #{item.repayRegisterRemark,jdbcType=VARCHAR}, #{lendStatus,jdbcType=TINYINT},
            #{item.gmtCreate,jdbcType=TIMESTAMP}, #{item.gmtModify,jdbcType=TIMESTAMP},
            #{item.lendAmount,jdbcType=DECIMAL},#{item.operationMan,jdbcType=VARCHAR})
        </foreach>
    </insert>


    <select id="exportLoanButNotRepay" resultType="com.yunche.loan.domain.vo.JtxExportVO">
        SELECT
        cus.NAME AS NAME,
        cus.id_card AS idCard,
        useGetCarName ( car.car_detail_id ) AS carName,
        plan.car_price AS carPrice,
        plan.down_payment_money AS downPaymentMoney,
        third.lend_amount AS lendAmount,
        DATE_FORMAT(third.lend_date,'%Y-%m-%d') AS lendDate,
        plan.loan_time AS loanTime,
        base.bank AS bank
        FROM
        loan_process_bridge process
        LEFT JOIN third_party_fund_business third ON third.bridge_procecss_id = process.id
        LEFT JOIN loan_order loan ON loan.id = process.order_id
        LEFT JOIN loan_customer cus ON cus.id = loan.loan_customer_id
        LEFT JOIN loan_car_info car ON car.id = loan.loan_car_info_id
        LEFT JOIN loan_financial_plan plan ON plan.id = loan.loan_financial_plan_id
        LEFT JOIN loan_base_info base ON base.id = loan.loan_base_info_id
        WHERE
        process.bridge_handle = 1
        AND process.bridge_repay_record != 1
        <if test="startDate != null and startDate != ''">
            <![CDATA[ AND third.lend_date >= #{startDate}]]>
        </if>
        <if test="endDate != null and endDate != ''">
            <![CDATA[ AND third.lend_date <= #{endDate} ]]>
        </if>
    </select>

    <select id="exportRefuseToLend" parameterType="com.yunche.loan.domain.query.TaskListQuery"
            resultType="com.yunche.loan.domain.vo.JtxExportRefuseToLendVO">
        SELECT
        loan.id           as id,
        cus.NAME          as customer,
        cus.id_card       as idCard,
        useGetSmallCarName(car.car_detail_id)     AS carName,
        plan.car_price    as carPrice,
        case when plan.loan_amount &gt;= remit.remit_amount
        then floor(remit.remit_amount/100)*100
        else floor(plan.loan_amount/100)*100 end   AS confThirdLoanMoney,
        cus.mobile                                AS mobile,
        plan.down_payment_money                    AS downPaymentMoney,
        plan.loan_amount     as loanAmount,
        plan.loan_time       as loanTime,
        base.bank         as bank,
        remit.remit_amount  as remitAmount,
        DATE_FORMAT(third_party.lend_date, '%Y-%m-%d') AS bridgeLendDate,
        join_r.lend_date  as lendDate,
        third_party.operation_man as refuseToLendMan,
        bridge.id         as processId
        from loan_order loan
        left join loan_customer cus on cus.id =loan.loan_customer_id
        left join loan_base_info base on base.id = loan.loan_base_info_id
        LEFT JOIN employee emp ON emp.id = base.salesman_id
        LEFT JOIN partner par ON par.id = base.partner_id
        left join loan_financial_plan plan on plan.id = loan.loan_financial_plan_id
        left join loan_process_bridge bridge on bridge.order_id = loan.id
        left join conf_third_real_bridge_process real_b on bridge.id = real_b.bridge_process_id
        left join conf_third_party_money conf_t on real_b.conf_third_party_id = conf_t.id
        left join third_party_fund_business third_party on third_party.bridge_procecss_id  = bridge.id
        left join loan_car_info car on car.id = loan.loan_car_info_id
        left join remit_details remit on loan.remit_details_id  = remit.id
        left  join bank_lend_record join_r on join_r.id = loan.bank_lend_record_id
        left join loan_process process on process.order_id = loan.id
        where process.order_status = 1 and
        case when #{lendStatus} = 1 then bridge.bridge_handle in (2,3) and bridge.order_status = 1
        and if((select count(*) from third_party_fund_business where bridge_procecss_id=bridge.id and bridge.order_status = 1 and lend_status in(3,4,5,6,7,8,9))=1,false,true)
        when #{lendStatus} = 2 then bridge.bridge_handle = 1 and bridge.order_status = 1
        when #{lendStatus} = 3 then bridge.bridge_handle = 2 and third_party.lend_status in(3,8) and bridge.order_status = 1
        when #{lendStatus} = 4 then bridge.bridge_handle = 2 and third_party.lend_status in(5,6,9) and bridge.order_status = 1
        when #{lendStatus} = 5 then bridge.bridge_handle = 2 and third_party.lend_status in(4,7) and bridge.order_status = 1
        end
        <if test="startLendDate !=null">
            AND third_party.lend_date &gt;= #{startLendDate}
        </if>
        <if test="endLendDate !=null">
            AND third_party.lend_date &lt;= #{endLendDate}
        </if>
        AND CASE WHEN #{maxGroupLevel}  = 0 THEN false
        when #{maxGroupLevel} = 1 then 1 = 1
        <if test="juniorIds != null and juniorIds.size() > 0">
            and base.salesman_id in
            <foreach item="item" index="index" collection="juniorIds" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        else true end
        and case when #{maxGroupLevel} = 3 then 1=1
        else 1=1
        <if test="bizAreaIdList != null and bizAreaIdList.size() > 0">
            and par.id in
            <foreach item="item" index="index" collection="bizAreaIdList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="bankList != null and bankList.size() > 0">
            and base.bank in
            <foreach item="item" index="index" collection="bankList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        end
        <if test="orderId != null">
            AND loan.id = #{orderId}
        </if>
        <if test="customer != null and customer != ''">
            AND cus.name LIKE CONCAT('%', #{customer} ,'%')
        </if>
    </select>
</mapper>