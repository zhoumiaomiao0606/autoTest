<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunche.loan.mapper.BankCodeDOMapper">
  <resultMap id="BaseResultMap" type="com.yunche.loan.domain.entity.BankCodeDO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="level" jdbcType="TINYINT" property="level" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, code, name, level, parent_id, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bank_code
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bank_code
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yunche.loan.domain.entity.BankCodeDO">
    insert into bank_code (id, code, name, 
      level, parent_id, status
      )
    values (#{id,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{level,jdbcType=TINYINT}, #{parentId,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yunche.loan.domain.entity.BankCodeDO">
    <selectKey  resultType="Integer" keyProperty="id"
                order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bank_code
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        #{level,jdbcType=TINYINT},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yunche.loan.domain.entity.BankCodeDO">
    update bank_code
    <set>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=TINYINT},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yunche.loan.domain.entity.BankCodeDO">
    update bank_code
    set code = #{code,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      level = #{level,jdbcType=TINYINT},
      parent_id = #{parentId,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectByBankId"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bank_code
    <where>
      <if test="bankId !=null and bankId !=''">
        and id = #{bankId,jdbcType=INTEGER}
      </if>
      <if test="level !=null and level !=''">
        and level = #{level,jdbcType=TINYINT}
      </if>
      and status = 0
    </where>
  </select>

  <select id="selectBankNameByParentId" parameterType="Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bank_code
    where parent_id =  #{bankId,jdbcType=INTEGER} and status = 0
  </select>

    <select id="selectByBankNameIsExist" parameterType="String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from bank_code
        where name = #{name,jdbcType=VARCHAR} and status = 0
    </select>

  <select id="bankNameList" parameterType="com.yunche.loan.domain.param.BankCodeParam" resultType="com.yunche.loan.domain.vo.BankCodeVO">
    select
    id,
    code,
    name
    from bank_code
    <where>
      <if test="name !=null" >
        name like concat('%',#{name},'%')
      </if>
      and  status = 0 and level = 1
    </where>

  </select>

  <delete id="deleteBankByParentId" parameterType="java.lang.Integer">
    delete from bank_code
    where parent_id =  #{bankId,jdbcType=INTEGER} and status = 0
  </delete>
</mapper>