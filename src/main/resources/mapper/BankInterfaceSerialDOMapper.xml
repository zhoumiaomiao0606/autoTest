<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunche.loan.mapper.BankInterfaceSerialDOMapper">
  <resultMap id="BaseResultMap" type="com.yunche.loan.domain.entity.BankInterfaceSerialDO">
    <id column="serial_no" jdbcType="VARCHAR" property="serialNo" />
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="customer_id" jdbcType="BIGINT" property="customerId" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="request_time" jdbcType="TIMESTAMP" property="requestTime" />
    <result column="callback_time" jdbcType="TIMESTAMP" property="callbackTime" />
    <result column="reject_reason" jdbcType="VARCHAR" property="rejectReason" />
    <result column="trans_code" jdbcType="VARCHAR" property="transCode" />
    <result column="api_status" jdbcType="INTEGER" property="apiStatus" />
    <result column="api_msg" jdbcType="VARCHAR" property="apiMsg" />
    <result column="file_num" jdbcType="INTEGER" property="fileNum" />
  </resultMap>
  <sql id="Base_Column_List">
    serial_no, order_id, customer_id, status, request_time, callback_time, reject_reason, 
    trans_code, api_status, api_msg, file_num
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bank_interface_serial
    where serial_no = #{serialNo,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from bank_interface_serial
    where serial_no = #{serialNo,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.yunche.loan.domain.entity.BankInterfaceSerialDO">
    insert into bank_interface_serial (serial_no, order_id, customer_id, 
      status, request_time, callback_time, 
      reject_reason, trans_code, api_status, 
      api_msg, file_num)
    values (#{serialNo,jdbcType=VARCHAR}, #{orderId,jdbcType=BIGINT}, #{customerId,jdbcType=BIGINT}, 
      #{status,jdbcType=TINYINT}, #{requestTime,jdbcType=TIMESTAMP}, #{callbackTime,jdbcType=TIMESTAMP}, 
      #{rejectReason,jdbcType=VARCHAR}, #{transCode,jdbcType=VARCHAR}, #{apiStatus,jdbcType=INTEGER}, 
      #{apiMsg,jdbcType=VARCHAR}, #{fileNum,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.yunche.loan.domain.entity.BankInterfaceSerialDO">
    insert into bank_interface_serial
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="serialNo != null">
        serial_no,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="requestTime != null">
        request_time,
      </if>
      <if test="callbackTime != null">
        callback_time,
      </if>
      <if test="rejectReason != null">
        reject_reason,
      </if>
      <if test="transCode != null">
        trans_code,
      </if>
      <if test="apiStatus != null">
        api_status,
      </if>
      <if test="apiMsg != null">
        api_msg,
      </if>
      <if test="fileNum != null">
        file_num,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="serialNo != null">
        #{serialNo,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="requestTime != null">
        #{requestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="callbackTime != null">
        #{callbackTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rejectReason != null">
        #{rejectReason,jdbcType=VARCHAR},
      </if>
      <if test="transCode != null">
        #{transCode,jdbcType=VARCHAR},
      </if>
      <if test="apiStatus != null">
        #{apiStatus,jdbcType=INTEGER},
      </if>
      <if test="apiMsg != null">
        #{apiMsg,jdbcType=VARCHAR},
      </if>
      <if test="fileNum != null">
        #{fileNum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yunche.loan.domain.entity.BankInterfaceSerialDO">
    update bank_interface_serial
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="requestTime != null">
        request_time = #{requestTime,jdbcType=TIMESTAMP},
      </if>
      <if test="callbackTime != null">
        callback_time = #{callbackTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rejectReason != null">
        reject_reason = #{rejectReason,jdbcType=VARCHAR},
      </if>
      <if test="transCode != null">
        trans_code = #{transCode,jdbcType=VARCHAR},
      </if>
      <if test="apiStatus != null">
        api_status = #{apiStatus,jdbcType=INTEGER},
      </if>
      <if test="apiMsg != null">
        api_msg = #{apiMsg,jdbcType=VARCHAR},
      </if>
      <if test="fileNum != null">
        file_num = #{fileNum,jdbcType=INTEGER},
      </if>
    </set>
    where serial_no = #{serialNo,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yunche.loan.domain.entity.BankInterfaceSerialDO">
    update bank_interface_serial
    set order_id = #{orderId,jdbcType=BIGINT},
      customer_id = #{customerId,jdbcType=BIGINT},
      status = #{status,jdbcType=TINYINT},
      request_time = #{requestTime,jdbcType=TIMESTAMP},
      callback_time = #{callbackTime,jdbcType=TIMESTAMP},
      reject_reason = #{rejectReason,jdbcType=VARCHAR},
      trans_code = #{transCode,jdbcType=VARCHAR},
      api_status = #{apiStatus,jdbcType=INTEGER},
      api_msg = #{apiMsg,jdbcType=VARCHAR},
      file_num = #{fileNum,jdbcType=INTEGER}
    where serial_no = #{serialNo,jdbcType=VARCHAR}
  </update>

  <select id="selectByCustomerIdAndTransCode" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from bank_interface_serial
    where customer_id = #{customerId,jdbcType=BIGINT}
    and trans_code=#{transCode,jdbcType=VARCHAR} ORDER BY serial_no DESC LIMIT 1
  </select>

  <select id="checkRequestBussIsSucessByTransCodeOrderId" resultType="java.lang.Boolean">
    select count(1) from bank_interface_serial serial
    inner join
    (
    select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator ','),',',1)
    as serial_no
    from bank_interface_serial t GROUP BY trans_code,customer_id
    ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
    and serial.customer_id = #{customerId} and serial.status in (0,1,2,3)
  </select>

  <!-- listOfBankCreditRecordPushFailed -->
  <select id="listOfBankCreditRecordPushFailed" resultMap="BaseResultMap">

    SELECT
    tmp.*

    FROM

    (
    SELECT DISTINCT serial.*

    FROM bank_interface_serial serial

    INNER JOIN

    (
    SELECT SUBSTRING_INDEX (

    GROUP_CONCAT(serial_no ORDER BY request_time DESC separator','), ',', 1

    ) AS serial_no

    FROM bank_interface_serial GROUP BY trans_code , customer_id

    ) orderdata ON orderdata.serial_no = serial.serial_no AND serial.trans_code = 'applyCredit'

    WHERE serial.api_status != 200 OR serial.status NOT IN (1, 2)

    ) tmp

    LEFT JOIN loan_process p ON p.order_Id = tmp.order_id

    WHERE
    p.bank_credit_record = 2 OR p.bank_credit_record = 3

  </select>
</mapper>