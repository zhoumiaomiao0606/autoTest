<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunche.loan.mapper.BankFileListRecordDOMapper">
  <resultMap id="BaseResultMap" type="com.yunche.loan.domain.entity.BankFileListRecordDO">
    <id column="bank_file_list_id" jdbcType="BIGINT" property="bankFileListId" />
    <result column="customer_id" jdbcType="BIGINT" property="customerId" />
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="area_id" jdbcType="VARCHAR" property="areaId" />
    <result column="plat_no" jdbcType="VARCHAR" property="platNo" />
    <result column="guaranty_unit" jdbcType="VARCHAR" property="guarantyUnit" />
    <result column="opencard_date" jdbcType="TIMESTAMP" property="opencardDate" />
    <result column="card_number" jdbcType="INTEGER" property="cardNumber" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="card_type" jdbcType="VARCHAR" property="cardType" />
    <result column="credential_no" jdbcType="VARCHAR" property="credentialNo" />
    <result column="hairpin_flag" jdbcType="VARCHAR" property="hairpinFlag" />
    <result column="account_statement" jdbcType="VARCHAR" property="accountStatement" />
    <result column="repay_date" jdbcType="VARCHAR" property="repayDate" />
    <result column="gmt_greate" jdbcType="TIMESTAMP" property="gmtGreate" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    bank_file_list_id, customer_id, order_id, area_id, plat_no, guaranty_unit, opencard_date, 
    card_number, name, card_type, credential_no, hairpin_flag, account_statement, repay_date, 
    gmt_greate, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bank_file_list_record
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
  </select>
  <select id="selectNewestByOrderId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bank_file_list_record where order_id = #{orderId,jdbcType=BIGINT} and customer_id =  (select loan_customer_id from loan_order where id = #{orderId,jdbcType=BIGINT}) ORDER BY bank_file_list_id desc limit 1
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from bank_file_list_record
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDO">
    insert into bank_file_list_record (bank_file_list_id, customer_id, order_id, 
      area_id, plat_no, guaranty_unit, 
      opencard_date, card_number, name, 
      card_type, credential_no, hairpin_flag, 
      account_statement, repay_date, gmt_greate, 
      status)
    values (#{bankFileListId,jdbcType=BIGINT}, #{customerId,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT}, 
      #{areaId,jdbcType=VARCHAR}, #{platNo,jdbcType=VARCHAR}, #{guarantyUnit,jdbcType=VARCHAR}, 
      #{opencardDate,jdbcType=TIMESTAMP}, #{cardNumber,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{cardType,jdbcType=VARCHAR}, #{credentialNo,jdbcType=VARCHAR}, #{hairpinFlag,jdbcType=VARCHAR}, 
      #{accountStatement,jdbcType=VARCHAR}, #{repayDate,jdbcType=VARCHAR}, #{gmtGreate,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDO">
    insert into bank_file_list_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bankFileListId != null">
        bank_file_list_id,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="areaId != null">
        area_id,
      </if>
      <if test="platNo != null">
        plat_no,
      </if>
      <if test="guarantyUnit != null">
        guaranty_unit,
      </if>
      <if test="opencardDate != null">
        opencard_date,
      </if>
      <if test="cardNumber != null">
        card_number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="cardType != null">
        card_type,
      </if>
      <if test="credentialNo != null">
        credential_no,
      </if>
      <if test="hairpinFlag != null">
        hairpin_flag,
      </if>
      <if test="accountStatement != null">
        account_statement,
      </if>
      <if test="repayDate != null">
        repay_date,
      </if>
      <if test="gmtGreate != null">
        gmt_greate,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bankFileListId != null">
        #{bankFileListId,jdbcType=BIGINT},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=VARCHAR},
      </if>
      <if test="platNo != null">
        #{platNo,jdbcType=VARCHAR},
      </if>
      <if test="guarantyUnit != null">
        #{guarantyUnit,jdbcType=VARCHAR},
      </if>
      <if test="opencardDate != null">
        #{opencardDate,jdbcType=TIMESTAMP},
      </if>
      <if test="cardNumber != null">
        #{cardNumber,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="cardType != null">
        #{cardType,jdbcType=VARCHAR},
      </if>
      <if test="credentialNo != null">
        #{credentialNo,jdbcType=VARCHAR},
      </if>
      <if test="hairpinFlag != null">
        #{hairpinFlag,jdbcType=VARCHAR},
      </if>
      <if test="accountStatement != null">
        #{accountStatement,jdbcType=VARCHAR},
      </if>
      <if test="repayDate != null">
        #{repayDate,jdbcType=VARCHAR},
      </if>
      <if test="gmtGreate != null">
        #{gmtGreate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDO">
    update bank_file_list_record
    <set>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="areaId != null">
        area_id = #{areaId,jdbcType=VARCHAR},
      </if>
      <if test="platNo != null">
        plat_no = #{platNo,jdbcType=VARCHAR},
      </if>
      <if test="guarantyUnit != null">
        guaranty_unit = #{guarantyUnit,jdbcType=VARCHAR},
      </if>
      <if test="opencardDate != null">
        opencard_date = #{opencardDate,jdbcType=TIMESTAMP},
      </if>
      <if test="cardNumber != null">
        card_number = #{cardNumber,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="cardType != null">
        card_type = #{cardType,jdbcType=VARCHAR},
      </if>
      <if test="credentialNo != null">
        credential_no = #{credentialNo,jdbcType=VARCHAR},
      </if>
      <if test="hairpinFlag != null">
        hairpin_flag = #{hairpinFlag,jdbcType=VARCHAR},
      </if>
      <if test="accountStatement != null">
        account_statement = #{accountStatement,jdbcType=VARCHAR},
      </if>
      <if test="repayDate != null">
        repay_date = #{repayDate,jdbcType=VARCHAR},
      </if>
      <if test="gmtGreate != null">
        gmt_greate = #{gmtGreate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDO">
    update bank_file_list_record
    set customer_id = #{customerId,jdbcType=BIGINT},
      order_id = #{orderId,jdbcType=BIGINT},
      area_id = #{areaId,jdbcType=VARCHAR},
      plat_no = #{platNo,jdbcType=VARCHAR},
      guaranty_unit = #{guarantyUnit,jdbcType=VARCHAR},
      opencard_date = #{opencardDate,jdbcType=TIMESTAMP},
      card_number = #{cardNumber,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      card_type = #{cardType,jdbcType=VARCHAR},
      credential_no = #{credentialNo,jdbcType=VARCHAR},
      hairpin_flag = #{hairpinFlag,jdbcType=VARCHAR},
      account_statement = #{accountStatement,jdbcType=VARCHAR},
      repay_date = #{repayDate,jdbcType=VARCHAR},
      gmt_greate = #{gmtGreate,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=TINYINT}
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
  </update>

  <insert id="insertBatch">
    INSERT INTO bank_file_list_record
    (bank_file_list_id, customer_id, order_id,
    area_id, plat_no, guaranty_unit,
    opencard_date, card_number, name,
    card_type, credential_no, hairpin_flag,
    account_statement, repay_date, gmt_greate,
    status)
    VALUES
    <foreach collection ="list" item="recordLists" separator =",">
      (#{bankFileListId,jdbcType=BIGINT}, #{customerId,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT},
      #{areaId,jdbcType=VARCHAR}, #{platNo,jdbcType=VARCHAR}, #{guarantyUnit,jdbcType=VARCHAR},
      #{opencardDate,jdbcType=TIMESTAMP}, #{cardNumber,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
      #{cardType,jdbcType=VARCHAR}, #{credentialNo,jdbcType=VARCHAR}, #{hairpinFlag,jdbcType=VARCHAR},
      #{accountStatement,jdbcType=VARCHAR}, #{repayDate,jdbcType=VARCHAR}, #{gmtGreate,jdbcType=TIMESTAMP},
      #{status,jdbcType=TINYINT})
    </foreach >
  </insert>

</mapper>