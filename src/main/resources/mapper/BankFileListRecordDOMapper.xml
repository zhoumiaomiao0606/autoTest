<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunche.loan.mapper.BankFileListRecordDOMapper">
  <resultMap id="BaseResultMap" type="com.yunche.loan.domain.entity.BankFileListRecordDO">
    <id column="bank_file_list_id" jdbcType="BIGINT" property="bankFileListId" />
    <id column="customer_id" jdbcType="BIGINT" property="customerId" />
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="area_id" jdbcType="VARCHAR" property="areaId" />
    <result column="plat_no" jdbcType="VARCHAR" property="platNo" />
    <result column="guaranty_unit" jdbcType="VARCHAR" property="guarantyUnit" />
    <result column="opencard_date" jdbcType="TIMESTAMP" property="opencardDate" />
    <result column="card_number" jdbcType="VARCHAR" property="cardNumber" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="card_type" jdbcType="VARCHAR" property="cardType" />
    <result column="credential_no" jdbcType="VARCHAR" property="credentialNo" />
    <result column="hairpin_flag" jdbcType="VARCHAR" property="hairpinFlag" />
    <result column="account_statement" jdbcType="VARCHAR" property="accountStatement" />
    <result column="repay_date" jdbcType="VARCHAR" property="repayDate" />
    <result column="gmt_greate" jdbcType="TIMESTAMP" property="gmtGreate" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="card_balance" jdbcType="DECIMAL" property="cardBalance" />
    <result column="optimal_return" jdbcType="DECIMAL" property="optimalReturn" />
    <result column="cumulative_breach_number" jdbcType="INTEGER" property="cumulativeBreachNumber" />
    <result column="consecutive_breach_number" jdbcType="INTEGER" property="consecutiveBreachNumber" />
    <result column="run_bank" jdbcType="VARCHAR" property="runBank" />
    <result column="instalment_types" jdbcType="VARCHAR" property="instalmentTypes" />
    <result column="instalment_amount" jdbcType="DECIMAL" property="instalmentAmount" />
    <result column="sum_number" jdbcType="INTEGER" property="sumNumber" />
    <result column="sum_amount" jdbcType="DECIMAL" property="sumAmount" />
    <result column="reminders" jdbcType="VARCHAR" property="reminders" />
    <result column="is_customer" jdbcType="TINYINT" property="isCustomer" />
    <result column="batch_date" jdbcType="TIMESTAMP" property="batchDate" />
  </resultMap>
  <sql id="Base_Column_List">
    bank_file_list_id, customer_id, order_id, area_id, plat_no, guaranty_unit, opencard_date, 
    card_number, name, card_type, credential_no, hairpin_flag, account_statement, repay_date, 
    gmt_greate, status, card_balance, optimal_return, cumulative_breach_number, consecutive_breach_number, 
    run_bank, instalment_types, instalment_amount, sum_number, sum_amount, reminders, 
    is_customer, batch_date
  </sql>
  <select id="selectByPrimaryKey" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDOKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bank_file_list_record
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
      and customer_id = #{customerId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDOKey">
    delete from bank_file_list_record
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
      and customer_id = #{customerId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteBylistId" parameterType="java.lang.Long">
    delete from bank_file_list_record
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDO">
    insert into bank_file_list_record (bank_file_list_id, customer_id, order_id, 
      area_id, plat_no, guaranty_unit, 
      opencard_date, card_number, name, 
      card_type, credential_no, hairpin_flag, 
      account_statement, repay_date, gmt_greate, 
      status, card_balance, optimal_return, 
      cumulative_breach_number, consecutive_breach_number, 
      run_bank, instalment_types, instalment_amount, 
      sum_number, sum_amount, reminders, 
      is_customer, batch_date)
    values (#{bankFileListId,jdbcType=BIGINT}, #{customerId,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT}, 
      #{areaId,jdbcType=VARCHAR}, #{platNo,jdbcType=VARCHAR}, #{guarantyUnit,jdbcType=VARCHAR}, 
      #{opencardDate,jdbcType=TIMESTAMP}, #{cardNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{cardType,jdbcType=VARCHAR}, #{credentialNo,jdbcType=VARCHAR}, #{hairpinFlag,jdbcType=VARCHAR}, 
      #{accountStatement,jdbcType=VARCHAR}, #{repayDate,jdbcType=VARCHAR}, #{gmtGreate,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=TINYINT}, #{cardBalance,jdbcType=DECIMAL}, #{optimalReturn,jdbcType=DECIMAL}, 
      #{cumulativeBreachNumber,jdbcType=INTEGER}, #{consecutiveBreachNumber,jdbcType=INTEGER}, 
      #{runBank,jdbcType=VARCHAR}, #{instalmentTypes,jdbcType=VARCHAR}, #{instalmentAmount,jdbcType=DECIMAL}, 
      #{sumNumber,jdbcType=INTEGER}, #{sumAmount,jdbcType=DECIMAL}, #{reminders,jdbcType=VARCHAR}, 
      #{isCustomer,jdbcType=TINYINT}, #{batchDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDO">
    insert into bank_file_list_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bankFileListId != null">
        bank_file_list_id,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="areaId != null">
        area_id,
      </if>
      <if test="platNo != null">
        plat_no,
      </if>
      <if test="guarantyUnit != null">
        guaranty_unit,
      </if>
      <if test="opencardDate != null">
        opencard_date,
      </if>
      <if test="cardNumber != null">
        card_number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="cardType != null">
        card_type,
      </if>
      <if test="credentialNo != null">
        credential_no,
      </if>
      <if test="hairpinFlag != null">
        hairpin_flag,
      </if>
      <if test="accountStatement != null">
        account_statement,
      </if>
      <if test="repayDate != null">
        repay_date,
      </if>
      <if test="gmtGreate != null">
        gmt_greate,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="cardBalance != null">
        card_balance,
      </if>
      <if test="optimalReturn != null">
        optimal_return,
      </if>
      <if test="cumulativeBreachNumber != null">
        cumulative_breach_number,
      </if>
      <if test="consecutiveBreachNumber != null">
        consecutive_breach_number,
      </if>
      <if test="runBank != null">
        run_bank,
      </if>
      <if test="instalmentTypes != null">
        instalment_types,
      </if>
      <if test="instalmentAmount != null">
        instalment_amount,
      </if>
      <if test="sumNumber != null">
        sum_number,
      </if>
      <if test="sumAmount != null">
        sum_amount,
      </if>
      <if test="reminders != null">
        reminders,
      </if>
      <if test="isCustomer != null">
        is_customer,
      </if>
      <if test="batchDate != null">
        batch_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bankFileListId != null">
        #{bankFileListId,jdbcType=BIGINT},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=VARCHAR},
      </if>
      <if test="platNo != null">
        #{platNo,jdbcType=VARCHAR},
      </if>
      <if test="guarantyUnit != null">
        #{guarantyUnit,jdbcType=VARCHAR},
      </if>
      <if test="opencardDate != null">
        #{opencardDate,jdbcType=TIMESTAMP},
      </if>
      <if test="cardNumber != null">
        #{cardNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="cardType != null">
        #{cardType,jdbcType=VARCHAR},
      </if>
      <if test="credentialNo != null">
        #{credentialNo,jdbcType=VARCHAR},
      </if>
      <if test="hairpinFlag != null">
        #{hairpinFlag,jdbcType=VARCHAR},
      </if>
      <if test="accountStatement != null">
        #{accountStatement,jdbcType=VARCHAR},
      </if>
      <if test="repayDate != null">
        #{repayDate,jdbcType=VARCHAR},
      </if>
      <if test="gmtGreate != null">
        #{gmtGreate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="cardBalance != null">
        #{cardBalance,jdbcType=DECIMAL},
      </if>
      <if test="optimalReturn != null">
        #{optimalReturn,jdbcType=DECIMAL},
      </if>
      <if test="cumulativeBreachNumber != null">
        #{cumulativeBreachNumber,jdbcType=INTEGER},
      </if>
      <if test="consecutiveBreachNumber != null">
        #{consecutiveBreachNumber,jdbcType=INTEGER},
      </if>
      <if test="runBank != null">
        #{runBank,jdbcType=VARCHAR},
      </if>
      <if test="instalmentTypes != null">
        #{instalmentTypes,jdbcType=VARCHAR},
      </if>
      <if test="instalmentAmount != null">
        #{instalmentAmount,jdbcType=DECIMAL},
      </if>
      <if test="sumNumber != null">
        #{sumNumber,jdbcType=INTEGER},
      </if>
      <if test="sumAmount != null">
        #{sumAmount,jdbcType=DECIMAL},
      </if>
      <if test="reminders != null">
        #{reminders,jdbcType=VARCHAR},
      </if>
      <if test="isCustomer != null">
        #{isCustomer,jdbcType=TINYINT},
      </if>
      <if test="batchDate != null">
        #{batchDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDO">
    update bank_file_list_record
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="areaId != null">
        area_id = #{areaId,jdbcType=VARCHAR},
      </if>
      <if test="platNo != null">
        plat_no = #{platNo,jdbcType=VARCHAR},
      </if>
      <if test="guarantyUnit != null">
        guaranty_unit = #{guarantyUnit,jdbcType=VARCHAR},
      </if>
      <if test="opencardDate != null">
        opencard_date = #{opencardDate,jdbcType=TIMESTAMP},
      </if>
      <if test="cardNumber != null">
        card_number = #{cardNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="cardType != null">
        card_type = #{cardType,jdbcType=VARCHAR},
      </if>
      <if test="credentialNo != null">
        credential_no = #{credentialNo,jdbcType=VARCHAR},
      </if>
      <if test="hairpinFlag != null">
        hairpin_flag = #{hairpinFlag,jdbcType=VARCHAR},
      </if>
      <if test="accountStatement != null">
        account_statement = #{accountStatement,jdbcType=VARCHAR},
      </if>
      <if test="repayDate != null">
        repay_date = #{repayDate,jdbcType=VARCHAR},
      </if>
      <if test="gmtGreate != null">
        gmt_greate = #{gmtGreate,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="cardBalance != null">
        card_balance = #{cardBalance,jdbcType=DECIMAL},
      </if>
      <if test="optimalReturn != null">
        optimal_return = #{optimalReturn,jdbcType=DECIMAL},
      </if>
      <if test="cumulativeBreachNumber != null">
        cumulative_breach_number = #{cumulativeBreachNumber,jdbcType=INTEGER},
      </if>
      <if test="consecutiveBreachNumber != null">
        consecutive_breach_number = #{consecutiveBreachNumber,jdbcType=INTEGER},
      </if>
      <if test="runBank != null">
        run_bank = #{runBank,jdbcType=VARCHAR},
      </if>
      <if test="instalmentTypes != null">
        instalment_types = #{instalmentTypes,jdbcType=VARCHAR},
      </if>
      <if test="instalmentAmount != null">
        instalment_amount = #{instalmentAmount,jdbcType=DECIMAL},
      </if>
      <if test="sumNumber != null">
        sum_number = #{sumNumber,jdbcType=INTEGER},
      </if>
      <if test="sumAmount != null">
        sum_amount = #{sumAmount,jdbcType=DECIMAL},
      </if>
      <if test="reminders != null">
        reminders = #{reminders,jdbcType=VARCHAR},
      </if>
      <if test="isCustomer != null">
        is_customer = #{isCustomer,jdbcType=TINYINT},
      </if>
      <if test="batchDate != null">
        batch_date = #{batchDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
      and customer_id = #{customerId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yunche.loan.domain.entity.BankFileListRecordDO">
    update bank_file_list_record
    set order_id = #{orderId,jdbcType=BIGINT},
      area_id = #{areaId,jdbcType=VARCHAR},
      plat_no = #{platNo,jdbcType=VARCHAR},
      guaranty_unit = #{guarantyUnit,jdbcType=VARCHAR},
      opencard_date = #{opencardDate,jdbcType=TIMESTAMP},
      card_number = #{cardNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      card_type = #{cardType,jdbcType=VARCHAR},
      credential_no = #{credentialNo,jdbcType=VARCHAR},
      hairpin_flag = #{hairpinFlag,jdbcType=VARCHAR},
      account_statement = #{accountStatement,jdbcType=VARCHAR},
      repay_date = #{repayDate,jdbcType=VARCHAR},
      gmt_greate = #{gmtGreate,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=TINYINT},
      card_balance = #{cardBalance,jdbcType=DECIMAL},
      optimal_return = #{optimalReturn,jdbcType=DECIMAL},
      cumulative_breach_number = #{cumulativeBreachNumber,jdbcType=INTEGER},
      consecutive_breach_number = #{consecutiveBreachNumber,jdbcType=INTEGER},
      run_bank = #{runBank,jdbcType=VARCHAR},
      instalment_types = #{instalmentTypes,jdbcType=VARCHAR},
      instalment_amount = #{instalmentAmount,jdbcType=DECIMAL},
      sum_number = #{sumNumber,jdbcType=INTEGER},
      sum_amount = #{sumAmount,jdbcType=DECIMAL},
      reminders = #{reminders,jdbcType=VARCHAR},
      is_customer = #{isCustomer,jdbcType=TINYINT},
      batch_date = #{batchDate,jdbcType=TIMESTAMP}
    where bank_file_list_id = #{bankFileListId,jdbcType=BIGINT}
      and customer_id = #{customerId,jdbcType=BIGINT}
  </update>

  <insert id="insertBatch" parameterType="java.util.List">
    INSERT INTO bank_file_list_record(bank_file_list_id, customer_id, order_id,
    area_id, plat_no, guaranty_unit,
    opencard_date, card_number, name,
    card_type, credential_no, hairpin_flag,
    account_statement, repay_date, gmt_greate,
    status, card_balance, optimal_return,
    cumulative_breach_number, consecutive_breach_number,
    run_bank, instalment_types, instalment_amount,
    sum_number, sum_amount, reminders, is_customer, batch_date)
    VALUES
    <foreach collection="list" item="item" index="index" separator=",">
      (#{bankFileListId,jdbcType=BIGINT}, #{customerId,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT},
      #{areaId,jdbcType=VARCHAR}, #{platNo,jdbcType=VARCHAR}, #{guarantyUnit,jdbcType=VARCHAR},
      #{opencardDate,jdbcType=TIMESTAMP}, #{cardNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
      #{cardType,jdbcType=VARCHAR}, #{credentialNo,jdbcType=VARCHAR}, #{hairpinFlag,jdbcType=VARCHAR},
      #{accountStatement,jdbcType=VARCHAR}, #{repayDate,jdbcType=VARCHAR}, #{gmtGreate,jdbcType=TIMESTAMP},
      #{status,jdbcType=TINYINT}, #{cardBalance,jdbcType=DECIMAL}, #{optimalReturn,jdbcType=DECIMAL},
      #{cumulativeBreachNumber,jdbcType=INTEGER}, #{consecutiveBreachNumber,jdbcType=INTEGER},
      #{runBank,jdbcType=VARCHAR}, #{instalmentTypes,jdbcType=VARCHAR}, #{instalmentAmount,jdbcType=DECIMAL},
      #{sumNumber,jdbcType=INTEGER}, #{sumAmount,jdbcType=DECIMAL}, #{reminders,jdbcType=VARCHAR},
      #{isCustomer,jdbcType=TINYINT}, #{batchDate,jdbcType=TIMESTAMP})
    </foreach >
  </insert>
  <select id="selectNewestByOrderId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bank_file_list_record where order_id = #{orderId,jdbcType=BIGINT} and customer_id =  (select loan_customer_id from loan_order where id = #{orderId,jdbcType=BIGINT}) ORDER BY bank_file_list_id desc limit 1
  </select>
</mapper>