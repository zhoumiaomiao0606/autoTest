<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yunche.loan.mapper.TaskSchedulingDOMapper">


    <select id="selectTelephoneVerifyLevel" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        max( t.telephone_verify_level )
        FROM
        ( SELECT ug.* FROM employee_rela_user_group eg INNER JOIN user_group ug ON eg.user_group_id = ug.id AND eg.employee_id = #{employeeId} ) t
    </select>

    <select id="selectCollectionLevel" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        max( t.collection_level )
        FROM
        ( SELECT ug.* FROM employee_rela_user_group eg INNER JOIN user_group ug ON eg.user_group_id = ug.id AND eg.employee_id = #{employeeId}) t
    </select>

    <select id="selectFinanceLevel" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        max( t.finance_level )
        FROM
        ( SELECT ug.* FROM employee_rela_user_group eg INNER JOIN user_group ug ON eg.user_group_id = ug.id AND eg.employee_id = #{employeeId} ) t
    </select>

    <select id="selectMaxGroupLevel" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        max( t.level )
        FROM
        ( SELECT ug.* FROM employee_rela_user_group eg INNER JOIN user_group ug ON eg.user_group_id = ug.id AND eg.employee_id = #{employeeId} ) t
    </select>

    <select id="selectFinanceApplyLevel" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        max( t.finance_apply_level )
        FROM
        ( SELECT ug.* FROM employee_rela_user_group eg INNER JOIN user_group ug ON eg.user_group_id = ug.id AND eg.employee_id = #{employeeId} ) t
    </select>

    <select id="selectRefundApplyLevel" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        max( t.refund_apply_level )
        FROM
        ( SELECT ug.* FROM employee_rela_user_group eg INNER JOIN user_group ug ON eg.user_group_id = ug.id AND eg.employee_id = #{employeeId} ) t
    </select>

    <select id="selectMaterialSupplementLevel" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        max( t.material_supplement_level )
        FROM
        ( SELECT ug.* FROM employee_rela_user_group eg INNER JOIN user_group ug ON eg.user_group_id = ug.id AND eg.employee_id = #{employeeId} ) t
    </select>

    <select id="selectBankInterfaceSerialOrderidList" resultType="java.lang.Long" parameterType="com.yunche.loan.domain.query.TaskListQuery">
     <choose>
          <when test="taskDefinitionKey == 'usertask_bank_credit_record' or taskDefinitionKey == 'usertask_credit_apply' or taskDefinitionKey == 'usertask_bank_open_card' or taskDefinitionKey == 'usertask_apply_instalment'">
                <choose>
                    <when test="serialStatus == 'except'">
                        <choose>
                            <when test="bankOpenCardOrder == 'except'">
                                select DISTINCT serial.order_id from bank_interface_serial serial
                                inner join
                                (
                                  select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator ','),',',1)
                                  as serial_no
                                  from bank_interface_serial GROUP BY trans_code,customer_id
                                ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                            </when>
                            <when test="bankOpenCardOrder == 'having'">
                                select DISTINCT serial.order_id from bank_interface_serial serial
                                inner join
                                (
                                  select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator ','),',',1)
                                  as serial_no
                                  from bank_interface_serial GROUP BY trans_code,customer_id
                                ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                            </when>
                            <otherwise>
                                select DISTINCT serial.order_id from bank_interface_serial serial
                                inner join
                                (
                                  select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator ','),',',1)
                                  as serial_no
                                  from bank_interface_serial GROUP BY trans_code,customer_id
                                ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                            </otherwise>
                        </choose>
                    </when>

                    <when test="serialStatus == 'exception'">
                        select  DISTINCT serial.order_id from bank_interface_serial serial
                        inner join
                        (
                          select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator ','),',',1)
                          as serial_no
                          from bank_interface_serial GROUP BY trans_code,customer_id
                        ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                        where serial.api_status !=200 or serial.status not in (0,1,2,3)
                    </when>
                    <when test="serialStatus == 'pending'">
                        select DISTINCT serial.order_id from bank_interface_serial serial
                        inner join
                        (
                          select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                          ','),',',1)
                          as serial_no
                          from bank_interface_serial GROUP BY trans_code,customer_id
                        ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                        where serial.api_status = 200 and serial.status in (0,1) and serial.order_id not in
                        (
                          select DISTINCT serial.order_id from bank_interface_serial serial
                          inner join
                          (
                            select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                            ','),',',1)
                            as serial_no
                            from bank_interface_serial GROUP BY trans_code,customer_id
                          ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                        where serial.api_status != 200 or serial.status not in (0,1)
                        )
                    </when>
                    <when test="serialStatus == 'success'">
                        select DISTINCT serial.order_id from bank_interface_serial serial
                        inner join
                        (
                          select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                          ','),',',1)
                          as serial_no
                          from bank_interface_serial GROUP BY trans_code,customer_id
                        ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                        where serial.api_status = 200 and serial.status in (1) and serial.order_id not in
                        (
                          select DISTINCT serial.order_id from bank_interface_serial serial
                          inner join
                          (
                            select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                            ','),',',1)
                            as serial_no
                            from bank_interface_serial GROUP BY trans_code,customer_id
                          ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                          where serial.api_status != 200 or serial.status not in (1)
                        )
                    </when>
                    <when test="serialStatus == 'failure'">
                        select DISTINCT serial.order_id from bank_interface_serial serial
                        inner join
                        (
                          select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                          ','),',',1)
                          as serial_no
                          from bank_interface_serial GROUP BY trans_code,customer_id
                        ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                        where serial.api_status = 200 and serial.status in (0) and serial.order_id not in
                        (
                          select DISTINCT serial.order_id from bank_interface_serial serial
                          inner join
                          (
                          select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                          ','),',',1)
                          as serial_no
                          from bank_interface_serial GROUP BY trans_code,customer_id
                          ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                          where serial.api_status != 200 or serial.status not in (0)
                        )
                    </when>
                    <when test="serialStatus == 'back'">
                        <choose>
                            <when test="taskDefinitionKey == 'usertask_credit_apply'">
                                select DISTINCT serial.order_id from bank_interface_serial serial
                                inner join
                                (
                                select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                                ','),',',1)
                                as serial_no
                                from bank_interface_serial GROUP BY trans_code,customer_id
                                ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                                where serial.api_status = 200 and serial.status in (0,3)
                            </when>
                            <otherwise>
                                select DISTINCT serial.order_id from bank_interface_serial serial
                                inner join
                                (
                                select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                                ','),',',1)
                                as serial_no
                                from bank_interface_serial GROUP BY trans_code,customer_id
                                ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                                where serial.api_status = 200 and serial.status = 3
                            </otherwise>
                        </choose>
                    </when>
                    <when test="serialStatus == 'process'">

                        select DISTINCT serial.order_id from bank_interface_serial serial
                        inner join
                        (
                          select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                          ','),',',1)
                          as serial_no
                          from bank_interface_serial GROUP BY trans_code,customer_id
                        ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                        where serial.api_status = 200 and serial.status = 2 and  serial.order_id not in
                        (
                          select DISTINCT serial.order_id from bank_interface_serial serial
                          inner join
                          (
                            select SUBSTRING_INDEX(GROUP_CONCAT(serial_no order by request_time desc separator
                            ','),',',1)
                            as serial_no
                            from bank_interface_serial GROUP BY trans_code,customer_id
                          ) orderdata on orderdata.serial_no = serial.serial_no and serial.trans_code = #{transCode}
                          where serial.api_status != 200 or serial.status not in (0,1,2,3)
                        )
                    </when>
                    <otherwise>
                        select temp.id from (SELECT 1 as id) temp  where temp.id =2
                    </otherwise>
                </choose>
              </when>
              <otherwise>
                  select temp.id from (SELECT 1 as id) temp  where temp.id =2
              </otherwise>
          </choose>
    </select>

    <select id="selectRejectTask" resultType="java.lang.Boolean">
				            select
							CASE WHEN b.order_status = 1  AND b.loan_apply = 3  AND b.reject_origin_task = 'usertask_material_review'
                            THEN  0 ELSE 1 END AS canUpdateLoanApply
							from
							(
							select
								temp.id,t.*
							from
							(
								select
									process.order_status,
									process.loan_apply,
									main_rej_log.reject_origin_task,
									main_rej_log.reject_to_task
								from loan_reject_log main_rej_log
								inner join
								(
									select SUBSTRING_INDEX(GROUP_CONCAT(id order by gmt_create desc separator ','),',',1) as id
									from loan_reject_log GROUP BY reject_origin_task,reject_to_task,order_id
								) inner_rej_log on inner_rej_log.id = main_rej_log.id
									and main_rej_log.reject_to_task = 'usertask_loan_apply' and reject_origin_task = 'usertask_material_review'

								left join loan_process process on process.order_id = main_rej_log.order_id
								left join loan_order orders on orders.id = main_rej_log.order_id
								where
									main_rej_log.order_id = #{orderId}
							) t
							right join (select ts.id from (select 1 as id) ts ) temp on 1=1
							) b
    </select>

    <select id="selectAppTaskList" resultType="com.yunche.loan.domain.vo.TaskListVO">
        select complex.* from
        (
        select tab.* from
        (
        select
        main.id AS id,
        join_e.id AS salesmanId,
        join_p.id AS partnerId,
        join_b.area_id AS bizAreaId,
        join_c.id AS customerId,
        join_c.name AS customer,
        DATE_FORMAT(main.gmt_create,'%Y-%m-%d %H:%i:%S') AS orderGmtCreate,
        join_c.id_card AS idCard,
        join_c.mobile AS mobile,
        join_e.name AS salesman,
        DATE_FORMAT(complex_log.usertask_credit_apply_create_time, '%Y-%m-%d %H:%i:%S' ) AS creditGmtCreate,
        join_bk.id   AS bankId,
        join_bk.name AS bank,
        join_d.name  AS departmentName,
        join_f.loan_amount AS loanAmount,
        join_f.bank_period_principal AS bankPeriodPrincipal,
        join_f.sign_rate AS signRate,
        DATE_FORMAT(complex_log.usertask_loan_apply_create_time,'%Y-%m-%d %H:%i:%S')     AS loanGmtCreate,
        join_i.car_type AS carType,
        join_h.license_plate_number AS licensePlateNumber,
        join_p.name AS partner,
        join_p.partner_code AS partnerCode,
        join_p.partner_group AS partnerGroup,
        join_f.loan_time AS loanTime,
        join_f.down_payment_money AS downPaymentMoney,
        join_car.car_detail_id,
        join_f.car_price

        FROM        loan_order main
        INNER JOIN  loan_process              deputy                on main.id = deputy.order_id
        left join   loan_customer             join_c                on join_c.id = main.loan_customer_id
        left join   loan_base_info            join_b                on join_b.id = main.loan_base_info_id
        left join   loan_financial_plan       join_f                on join_f.id = main.loan_financial_plan_id
        left join   loan_car_info             join_car              on join_car.id = main.loan_car_info_id
        left join   loan_car_info             join_i                on join_i.id = main.loan_car_info_id
        left join   bank                      join_bk               on join_bk.name = join_b.bank
        left join   partner                   join_p                on join_p.id = join_b.partner_id
        left join   employee                  join_e                on join_e.id = join_b.salesman_id
        left join   department                join_d                on join_d.id = join_p.department_id
        left join   vehicle_information       join_h                on join_h.id = main.vehicle_information_id
        left join   current_node_manager      complex_log           on main.id = complex_log.order_id
        where 1=1 and deputy.order_status = 1
        /**
        * 多节点查询类型：
        * 1-征信申请列表【未查询： [提交征信申请单后 , 贷款业务申请单) 】;
        * 2-征信申请列表【已查询： [贷款业务申请单 , end] 】;
        * 3-贷款申请列表【待审核： [提交贷款申请单后 , 电审通过) 】;
        * 4-贷款申请列表【已审核： [电审通过后 , end] 】;
        * 5-客户查询列表【在贷客户： [提交征信申请单后 , 未放款) 】;
        * 6-客户查询列表【已贷客户： [已放款 , end] 】;
        * 7-视频面签列表【所有客户-无节点限制】;
        */
        <choose>
            <when test="multipartType == 1">
                AND case
                when join_b.loan_amount > 1 then
                deputy.bank_credit_record = 2 OR deputy.social_credit_record = 2
                else
                deputy.bank_credit_record = 2
                end
            </when>
            <when test="multipartType == 2">
                AND case when join_b.loan_amount > 1 then
                deputy.bank_credit_record = 1 AND deputy.social_credit_record = 1
                else
                deputy.bank_credit_record = 1
                end
            </when>
            <when test="multipartType == 3">
                AND (deputy.loan_apply = 1) AND ((deputy.telephone_verify != 0 and deputy.telephone_verify != 1) OR
                deputy.visit_verify = 2 OR deputy.visit_verify = 3 )
            </when>
            <when test="multipartType == 4">
                AND deputy.telephone_verify = 1
            </when>
            <when test="multipartType == 5">
                AND deputy.credit_apply = 1 AND deputy.remit_review != 1
            </when>
            <when test="multipartType == 6">
                AND deputy.remit_review = 1
            </when>
            <when test="multipartType == 7">
                AND
                    CASE
                        <!-- 杭州城站 - [视频面签登记]-已提交-->
                        WHEN join_bk.id = 1 THEN
                            deputy.loan_info_record = 1
                        <!-- 哈尔滨顾乡支行 - [视频面签登记]-已提交-->
                        WHEN join_bk.id = 2 THEN
                            deputy.loan_info_record = 1
                        <!-- 台州路桥支行 - [视频面签登记]-已提交-->
                        WHEN join_bk.id = 3 THEN
                            deputy.loan_info_record = 1
                        <!-- 其他银行 - [征信申请]-即单子生成即可 ==> 无需控制-->
                        ELSE
                            1=1
                    END
            </when>
            <otherwise>
                AND 1=2
            </otherwise>
        </choose>
        ) tab
        where 1=1
        AND CASE WHEN #{maxGroupLevel} = 0 THEN false
        when #{maxGroupLevel} = 1 then
        tab.salesmanId in
        <foreach item="item" index="index" collection="juniorIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        else true end
        <if test="customer != null and customer != '' ">
            AND tab.customer LIKE CONCAT('%', #{customer} ,'%')
        </if>
        <if test="bankName !=null and bankName != '' ">
            AND tab.bank = #{bankName}
        </if>
        <if test="idCard !=null and idCard != '' ">
            AND tab.idCard = #{idCard}
        </if>
        ) complex
        where 1=1
        and
        case when #{maxGroupLevel} = 3 then 1=1
        else 1=1
        <if test="bizAreaIdList != null and bizAreaIdList.size() > 0">
            and
            complex.partnerId in
            <foreach item="item" index="index" collection="bizAreaIdList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="bankList != null and bankList.size() > 0">
            and
            complex.bank in
            <foreach item="item" index="index" collection="bankList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        end
        order by complex.orderGmtCreate desc
    </select>


        <select id="selectTaskList" resultType="com.yunche.loan.domain.vo.TaskListVO" parameterType="com.yunche.loan.domain.query.TaskListQuery">
            select complex.*,
            complex_log.usertask_credit_apply_gmt_user_name                                    AS creditMan,
            DATE_FORMAT(complex.creditApplySubmitTime, '%Y-%m-%d %H:%i:%S' )   AS creditDate,
            DATE_FORMAT(complex_log.usertask_bank_credit_record_create_time, '%Y-%m-%d %H:%i:%S' )   AS bankCreditDate,
            DATE_FORMAT(complex_log.usertask_social_credit_record_create_time, '%Y-%m-%d %H:%i:%S' )   AS socialCreditDate,
            DATE_FORMAT(complex_log.usertask_remit_review_create_time,'%Y-%m-%d %H:%i:%S')     AS remitGmtCreate,
            DATE_FORMAT(complex_log.usertask_loan_apply_create_time,'%Y-%m-%d %H:%i:%S')       AS loanGmtCreate,
            DATE_FORMAT(complex_log.usertask_telephone_verify_create_time,'%Y-%m-%d %H:%i:%S') AS telephoneGmtCreate,
            DATE_FORMAT(complex_log.usertask_material_print_review_create_time,'%Y-%m-%d %H:%i:%S') AS printGmtCreate,
            DATE_FORMAT(complex_log.usertask_visit_verify_create_time,'%Y-%m-%d %H:%i:%S')     AS visitGmtCreate
            from
            (
            select task.*,
            taskdis.status as taskDisStatus,
            taskdis.sendee as receiveManId,
            taskdis.sendee_name as receiveManName
            from
            (
            select
            tab.*,
            (#{taskDefinitionKey}) AS taskKey,
            tab.taskStatus AS taskType,
            useGetTaskTypeText(#{taskDefinitionKey},tab.taskStatus,tab.orderStatus) AS taskTypeText,
            useGetCurrentTask(#{taskDefinitionKey}) AS currentTask
            from
            (
            select
                  <choose>
                        <when test="taskDefinitionKey == 'usertask_info_supplement'">
                            join_s.id                                      AS taskId,
                        </when>
                        <when test="taskDefinitionKey == 'usertask_financial_scheme_modify_apply'">
                            join_his.id                                    AS taskId,
                        </when>
                        <when test="taskDefinitionKey == 'usertask_financial_scheme_modify_apply_review'">
                            join_his.id                                    AS taskId,
                        </when>
                        <when test="taskDefinitionKey == 'usertask_refund_apply'">
                            join_refund.id                                 AS taskId,
                        </when>
                        <when test="taskDefinitionKey == 'usertask_refund_apply_review'">
                            join_refund.id                                 AS taskId,
                        </when>
                        <otherwise>
                            main.id                                        AS taskId,
                        </otherwise>
                    </choose>
                  main.id                                      AS id,
                  jbds.cat        as creditApplySubmitTime,
                  join_e.id                                    AS salesmanId,
            DATE_FORMAT((
            SELECT
            loan_process_log.create_time
            FROM
            loan_process_log
            WHERE
            order_id = principal_orders.id
            AND task_definition_key = 'usertask_bank_open_card'
            and action = 1
            ORDER BY
            id DESC
            LIMIT 1
            ), '%Y-%m-%d %H:%i:%S' )
            as bankOpenCardTime,
                  join_p.id                                    AS partnerId,
                  join_b.area_id                               AS bizAreaId,
                  join_c.id                                    AS customerId,
                  join_c.name                                  AS customer,
                  join_c.credit_exp_flag                       AS creditExpFlag,
                  DATE_FORMAT(main.gmt_create,'%Y-%m-%d %H:%i:%S')      AS orderGmtCreate,
                  join_c.id_card                               AS idCard,
                  join_c.mobile                                AS mobile,
                  join_e.name                                  AS salesman,
                  join_b.bank                                  AS bank,
                  join_d.name                                  AS departmentName,
                  join_f.loan_amount                           AS loanAmount,
                  join_f.bank_period_principal                 AS bankPeriodPrincipal,
                  join_f.sign_rate                             AS signRate,
                  join_i.car_type                              AS carType,
                  join_h.license_plate_number                  AS licensePlateNumber,
                  join_p.name                                  AS partner,
                  join_p.partner_code                          AS partnerCode,
                  join_p.partner_group                         AS partnerGroup,
                  join_f.loan_time                             AS loanTime,
                  join_f.down_payment_money                    AS downPaymentMoney,
                  0                                            AS overdueNum,
                  DATE_FORMAT(join_r.lend_date,'%Y-%m-%d %H:%i:%S') AS lendDate,
                  deputy.order_status                          AS orderStatus,
                  join_f.financial_product_name                AS financial_product_name,
                  join_f.car_price                             AS car_price,
                  join_f.each_month_repay                      AS each_month_repay,
                  DATE_FORMAT(join_bp.gmt_create,'%Y-%m-%d %H:%i:%S')
                                                               AS paymentGtCreate,
                  deputy.telephone_verify                      AS telephoneVerifyStatus,
                  join_c.open_card_order                       AS openCardOrder,
                  useGetSmallCarName(join_i.car_detail_id)     AS carName,
                  join_i.gps_num                               AS carGpsNum,
                  join_bp.remit_amount                         AS remitAmount,
                  DATE_FORMAT(join_bp.remit_time, '%Y-%m-%d %H:%i:%S')
                                                               AS remitTime,
            <choose>
                      <when test="taskDefinitionKey == 'usertask_credit_apply'">
                          deputy.credit_apply                     AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_bank_credit_record'">
                          deputy.bank_credit_record               AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_social_credit_record'">
                          deputy.social_credit_record             AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_loan_apply'">
                          deputy.loan_apply                       AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_visit_verify'">
                          deputy.visit_verify                     AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_telephone_verify'">
                          useLevelGetTaskStatus(#{telephoneVerifyLevel},deputy.telephone_verify)   AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_business_pay'">
                          deputy.business_pay                     AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'servicetask_financial_scheme'">
                          deputy.financial_scheme                 AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_bank_card_record'">
                          deputy.bank_card_record                 AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_car_insurance'">
                          deputy.car_insurance                    AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_vehicle_information'">
                          deputy.vehicle_information              AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_apply_license_plate_deposit_info'">
                          deputy.apply_license_plate_deposit_info AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_install_gps'">
                          deputy.install_gps                      AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_commit_key'">
                          deputy.commit_key                       AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_material_review'">
                          deputy.material_review                  AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_material_print_review'">
                          deputy.material_print_review            AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_business_review'">
                          deputy.business_review                  AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_loan_review'">
                          deputy.loan_review                      AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_remit_review'">
                          deputy.remit_review                     AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_bank_lend_record'">
                          deputy.bank_lend_record                   AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_video_review'">
                          deputy.video_review                       AS taskStatus,
                          videonum.face_num                         AS faceNum
                      </when>
                <when test="taskDefinitionKey == 'usertask_under_line_video_review'">
                    deputy.under_line_video_review                       AS taskStatus,
                    videonum.face_num                         AS faceNum
                </when>
                      <when test="taskDefinitionKey == 'usertask_info_supplement'">
                          join_s.type                               AS supplementType,
                          join_s.content                            AS supplementContent,
                          useSupplementTypeTxt(join_s.type)         AS supplementTypeText,
                          DATE_FORMAT(join_s.start_time,'%Y-%m-%d %H:%i:%S')     AS supplementStartTime,
                          join_s.id                                 AS supplementOrderId,
                          join_s.status                             AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_financial_scheme_modify_apply'">
                          join_his.id                              AS his_id,
                          DATE_FORMAT(join_his.start_time ,'%Y-%m-%d %H:%i:%S')          AS his_start_time,
                          join_his.status                          AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_financial_scheme_modify_apply_review'">
                          join_his.id                              AS his_id,
                          DATE_FORMAT(join_his.start_time ,'%Y-%m-%d %H:%i:%S')            AS his_start_time,
                          useLevelGetTaskStatus(#{telephoneVerifyLevel},join_his.status)   AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_refund_apply'">
                          join_refund.id                           AS refund_id,
                          DATE_FORMAT(join_refund.start_time,'%Y-%m-%d %H:%i:%S')        AS refund_start_time,
                          DATE_FORMAT(join_refund.end_time,'%Y-%m-%d %H:%i:%S')          AS refund_end_time,
                          join_refund.refund_amount                AS refund_amount,
                          join_refund.status                       AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_refund_apply_review'">
                          join_refund.id                           AS refund_id,
                          DATE_FORMAT(join_refund.start_time,'%Y-%m-%d %H:%i:%S')        AS refund_start_time,
                          DATE_FORMAT(join_refund.end_time,'%Y-%m-%d %H:%i:%S')          AS refund_end_time,
                          join_refund.refund_amount                AS refund_amount,
                          join_refund.status                       AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_customer_repay_plan'">
                          join_repayplan.repay_date               AS repayDate,
                          0                                       AS isStraighten,
                          join_repayplan.status                   AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_collection_workbench'">
                          (select collection_date from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                        AS collectionDate,
                          (select is_repayment from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                        AS isRepayment,
                          DATE_FORMAT(join_urgerecord.sendee_date,'%Y-%m-%d %H:%i:%S')  AS sendeeDate,
                          DATE_FORMAT(join_urgerecord.gmt_create,'%Y-%m-%d %H:%i:%S')   AS urgeGmtCreate,
                          join_urgerecord.sendee                  AS sendee,
                          sendee.name                             AS sendeeName,
                          join_urgerecord.bank_repay_imp_record_id AS bankRepayImpRecordId,
                          join_rep.optimal_return                 AS overdueAmount,
                          join_urgerecord.urge_status             AS taskStatus
                      </when>
                       <when test="taskDefinitionKey == 'usertask_visit_collection_review'">
                           deputy_c.id                                                   AS processId,
                           (select collection_date from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS collectionDate,
                           (select is_repayment from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS isRepayment,
                           DATE_FORMAT(join_urgerecord.sendee_date,'%Y-%m-%d %H:%i:%S')  AS sendeeDate,
                           DATE_FORMAT(join_urgerecord.gmt_create,'%Y-%m-%d %H:%i:%S')   AS urgeGmtCreate,
                           join_urgerecord.sendee                  AS sendee,
                           sendee.name                             AS sendeeName,
                           deputy_c.bank_repay_imp_record_id       AS bankRepayImpRecordId,
                           join_rep.optimal_return                 AS overdueAmount,
                           deputy_c.visit_collection_review        AS taskStatus
                       </when>
                       <when test="taskDefinitionKey == 'usertask_visit_collection'">
                           deputy_c.id                                                   AS processId,
                           door.id                                                       AS visitDoorId,
                           (select collection_date from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS collectionDate,
                           (select is_repayment from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS isRepayment,
                           DATE_FORMAT(join_urgerecord.sendee_date,'%Y-%m-%d %H:%i:%S')  AS sendeeDate,
                           DATE_FORMAT(join_urgerecord.gmt_create,'%Y-%m-%d %H:%i:%S')   AS urgeGmtCreate,
                           join_urgerecord.sendee                  AS sendee,
                           sendee.name                             AS sendeeName,
                           deputy_c.bank_repay_imp_record_id       AS bankRepayImpRecordId,
                           join_rep.optimal_return                 AS overdueAmount,
                           deputy_c.visit_collection               AS taskStatus
                       </when>
                       <when test="taskDefinitionKey == 'usertask_car_handle'">
                           deputy_c.id                                                   AS processId,
                           (select collection_date from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS collectionDate,
                           (select is_repayment from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS isRepayment,
                           DATE_FORMAT(join_urgerecord.sendee_date,'%Y-%m-%d %H:%i:%S')  AS sendeeDate,
                           DATE_FORMAT(join_urgerecord.gmt_create,'%Y-%m-%d %H:%i:%S')   AS urgeGmtCreate,
                           join_urgerecord.sendee                  AS sendee,
                           sendee.name                             AS sendeeName,
                           deputy_c.bank_repay_imp_record_id       AS bankRepayImpRecordId,
                           join_rep.optimal_return                 AS overdueAmount,
                           deputy_c.car_handle                     AS taskStatus
                       </when>
                       <when test="taskDefinitionKey == 'usertask_car_out'">
                           deputy_c.id                                                   AS processId,
                           (select collection_date from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS collectionDate,
                           (select is_repayment from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS isRepayment,
                           DATE_FORMAT(join_urgerecord.sendee_date,'%Y-%m-%d %H:%i:%S')  AS sendeeDate,
                           DATE_FORMAT(join_urgerecord.gmt_create,'%Y-%m-%d %H:%i:%S')   AS urgeGmtCreate,
                           join_urgerecord.sendee                  AS sendee,
                           sendee.name                             AS sendeeName,
                           deputy_c.bank_repay_imp_record_id       AS bankRepayImpRecordId,
                           join_rep.optimal_return                 AS overdueAmount,
                           deputy_c.car_out                        AS taskStatus
                       </when>
                       <when test="taskDefinitionKey == 'usertask_settle_order'">
                           deputy_c.id                                                   AS processId,
                           (select collection_date from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS collectionDate,
                           (select is_repayment from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS isRepayment,
                           DATE_FORMAT(join_urgerecord.sendee_date,'%Y-%m-%d %H:%i:%S')  AS sendeeDate,
                           DATE_FORMAT(join_urgerecord.gmt_create,'%Y-%m-%d %H:%i:%S')   AS urgeGmtCreate,
                           join_urgerecord.sendee                  AS sendee,
                           sendee.name                             AS sendeeName,
                           deputy_c.bank_repay_imp_record_id       AS bankRepayImpRecordId,
                           join_rep.optimal_return                 AS overdueAmount,
                           deputy_c.settle_order                   AS taskStatus
                       </when>
                       <when test="taskDefinitionKey == 'usertask_legal_review'">
                           deputy_l.id                                                   AS processId,
                           (select collection_date from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS collectionDate,
                           (select is_repayment from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS isRepayment,
                           DATE_FORMAT(join_urgerecord.sendee_date,'%Y-%m-%d %H:%i:%S')  AS sendeeDate,
                           DATE_FORMAT(join_urgerecord.gmt_create,'%Y-%m-%d %H:%i:%S')   AS urgeGmtCreate,
                           join_urgerecord.sendee                  AS sendee,
                           sendee.name                             AS sendeeName,
                           deputy_l.bank_repay_imp_record_id       AS bankRepayImpRecordId,
                           join_rep.optimal_return                 AS overdueAmount,
                           deputy_l.legal_review                   AS taskStatus
                       </when>
                       <when test="taskDefinitionKey == 'usertask_legal_record'">
                           deputy_l.id                                                   AS processId,
                           (select collection_date from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS collectionDate,
                           (select is_repayment from collection_record where order_id = main.id order by collection_date,gmt_create desc limit 1)
                                                                                         AS isRepayment,
                           DATE_FORMAT(join_urgerecord.sendee_date,'%Y-%m-%d %H:%i:%S')  AS sendeeDate,
                           DATE_FORMAT(join_urgerecord.gmt_create,'%Y-%m-%d %H:%i:%S')   AS urgeGmtCreate,
                           join_urgerecord.sendee                  AS sendee,
                           sendee.name                             AS sendeeName,
                           deputy_l.bank_repay_imp_record_id       AS bankRepayImpRecordId,
                           join_rep.optimal_return                 AS overdueAmount,
                           deputy_l.legal_record                   AS taskStatus
                       </when>
                      <when test="taskDefinitionKey == 'usertask_bank_open_card'">
                          deputy.bank_open_card                   AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_loan_info_record'">
                          deputy.loan_info_record                 AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_apply_instalment'">
                          deputy.apply_instalment                 AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_bank_card_send'">
                          deputy.bank_card_send                   AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_apply_instead_pay'">
                          deputy_.id                                   AS processId,
                          compensation.partner_compensation_amount     AS partnerCompensationAmount,
                          compensation.compensation_amount             AS compensationAmount,
                          deputy_.bank_repay_imp_record_id             AS insteadPayOrderId,
                          compensation.curr_arrears                    AS currArrears,
                          compensation.loan_banlance                   AS loanBanlance,
                          compensation.advances_banlance               AS advancesBanlance,
                          compensation.overdue_days                    AS overdueDays,
                          compensation.overdue_number                  AS overdueNumber,
                          compensation.advances_number                 AS advancesNumber,
                          compensation.risk_taking_ratio               AS riskTakingRatio,
                          DATE_FORMAT(compensation.apply_compensation_date,'%Y-%m-%d') AS applyCompensationDate,
                          join_rep.optimal_return                      AS overdueAmount,
                          join_c.lend_card                             AS lendCard,
                          deputy_.apply_instead_pay                    AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_finance_instead_pay_review'">
                          deputy_.id                                   AS processId,
                          compensation.partner_compensation_amount     AS partnerCompensationAmount,
                          compensation.compensation_amount             AS compensationAmount,
                          deputy_.bank_repay_imp_record_id                 AS insteadPayOrderId,
                          compensation.curr_arrears                    AS currArrears,
                          compensation.loan_banlance                   AS loanBanlance,
                          compensation.advances_banlance               AS advancesBanlance,
                          compensation.overdue_days                    AS overdueDays,
                          compensation.overdue_number                  AS overdueNumber,
                          compensation.advances_number                 AS advancesNumber,
                          compensation.risk_taking_ratio               AS riskTakingRatio,
                          DATE_FORMAT(compensation.apply_compensation_date,'%Y-%m-%d') AS applyCompensationDate,
                          join_rep.optimal_return                      AS overdueAmount,
                          deputy_.finance_instead_pay_review           AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_partner_instead_pay'">
                          deputy_.id                                   AS processId,
                          compensation.partner_compensation_amount     AS partnerCompensationAmount,
                          compensation.compensation_amount             AS compensationAmount,
                          deputy_.bank_repay_imp_record_id             AS insteadPayOrderId,
                          compensation.curr_arrears                    AS currArrears,
                          compensation.loan_banlance                   AS loanBanlance,
                          compensation.advances_banlance               AS advancesBanlance,
                          compensation.overdue_days                    AS overdueDays,
                          compensation.overdue_number                  AS overdueNumber,
                          compensation.advances_number                 AS advancesNumber,
                          compensation.risk_taking_ratio               AS riskTakingRatio,
                          DATE_FORMAT(compensation.apply_compensation_date,'%Y-%m-%d %H:%i:%S') AS applyCompensationDate,
                          join_rep.optimal_return                      AS overdueAmount,
                          deputy_.partner_instead_pay                  AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_partner_instead_pay_review'">
                          deputy_.id                                   AS processId,
                          compensation.partner_compensation_amount     AS partnerCompensationAmount,
                          compensation.compensation_amount             AS compensationAmount,
                          deputy_.bank_repay_imp_record_id                 AS insteadPayOrderId,
                          compensation.curr_arrears                    AS currArrears,
                          compensation.loan_banlance                   AS loanBanlance,
                          compensation.advances_banlance               AS advancesBanlance,
                          compensation.overdue_days                    AS overdueDays,
                          compensation.overdue_number                  AS overdueNumber,
                          compensation.advances_number                 AS advancesNumber,
                          compensation.risk_taking_ratio               AS riskTakingRatio,
                          DATE_FORMAT(compensation.apply_compensation_date,'%Y-%m-%d %H:%i:%S') AS applyCompensationDate,
                          join_rep.optimal_return                      AS overdueAmount,
                          deputy_.partner_instead_pay_review           AS taskStatus
                      </when>
                      <when test="taskDefinitionKey == 'usertask_material_manage'">
                          deputy.material_manage                       AS taskStatus
                      </when>

                      <when test="taskDefinitionKey == 'usertask_bridge_handle'
                                  || taskDefinitionKey == 'usertask_bridge_repay_record'
                                  || taskDefinitionKey == 'usertask_bridge_interest_record'
                                  || taskDefinitionKey == 'usertask_bridge_repay_info'">
                          deputy_b.id                                  AS processId,
                          deputy_b.bridge_handle                       AS taskStatus,
                          DATE_FORMAT(third_party.lend_date, '%Y-%m-%d')
                                                                       AS bridgeLendDate,
                          conf_t.loan_time                             AS confThirdLoanTime,
                          third_party.repay_type                       AS bridgeRepayType,
                          DATE_FORMAT(third_party.repay_date, '%Y-%m-%d %H:%i:%S')
                                                                       AS bridgeRepayDate,
                          third_party.repay_remark                     AS bridgeRepayRemark,
                          third_party.interest                         AS bridgeInterest,
                          third_party.poundage                         AS bridgePoundage,
                          DATE_FORMAT(third_party.repay_interest_date, '%Y-%m-%d %H:%i:%S')
                                                                       AS bridgeRepayInterestDate,
                          third_party.repay_register_remark            AS bridgeRepayRegisterRemark,
                          third_party.lend_status                      AS bridgeLendStatus,
                          third_party.lend_amount                      AS bridgeLendAmount
                      </when>

                      <otherwise>
                        0                                              AS taskStatus
                      </otherwise>
                  </choose>
              from loan_order main
            LEFT JOIN
            (SELECT principal_cust_id, MAX(credit_apply_time) cat
            FROM
            (SELECT  allhis.customer_id,allhis.credit_apply_time,loan_customer.principal_cust_id FROM
            (select customer_id,max(credit_apply_time) AS credit_apply_time FROM loan_credit_info_bank_his GROUP BY customer_id) allhis
            LEFT JOIN loan_customer ON allhis.customer_id = loan_customer.id) qnmd GROUP BY principal_cust_id) jbds
            ON jbds.principal_cust_id= main.loan_customer_id
              inner join loan_process deputy               on main.id               = deputy.order_id
              left  join loan_customer join_c              on join_c.id             = main.loan_customer_id
              left  join loan_base_info join_b             on join_b.id             = main.loan_base_info_id
              left  join loan_financial_plan join_f        on join_f.id             = main.loan_financial_plan_id
              left  join loan_car_info join_i              on join_i.id             = main.loan_car_info_id
              left  join partner join_p                    on join_p.id             = join_b.partner_id
              left  join employee join_e                   on join_e.id             = join_b.salesman_id
              left  join department join_d                 on join_d.id             = join_p.department_id
              left  join vehicle_information join_h        on join_h.id             = main.vehicle_information_id
              left  join bank_lend_record join_r           on join_r.id             = main.bank_lend_record_id
              left  join remit_details join_bp             on main.remit_details_id  = join_bp.id
              <if test="taskDefinitionKey == 'usertask_info_supplement'">
              left join loan_info_supplement join_s        on main.id               = join_s.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_financial_scheme_modify_apply'">
              left join loan_financial_plan_temp_his join_his   on main.id          = join_his.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_financial_scheme_modify_apply_review'">
              left join loan_financial_plan_temp_his join_his   on main.id          = join_his.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_refund_apply'">
              left join loan_refund_apply join_refund           on main.id          = join_refund.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_refund_apply_review'">
              left join loan_refund_apply join_refund           on main.id          = join_refund.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_customer_repay_plan'">
              left join bank_card_record join_repayplan          on main.id         = join_repayplan.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_apply_instead_pay'">
                  left join loan_process_instead_pay deputy_ on deputy_.order_id = main.id
                  left join loan_apply_compensation compensation on compensation.id = deputy_.bank_repay_imp_record_id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = deputy_.bank_repay_imp_record_id and deputy_.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_finance_instead_pay_review'">
                  left join loan_process_instead_pay deputy_ on deputy_.order_id = main.id
                  left join loan_apply_compensation compensation on compensation.id = deputy_.bank_repay_imp_record_id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = deputy_.bank_repay_imp_record_id and deputy_.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_partner_instead_pay'">
                  left join loan_process_instead_pay deputy_ on deputy_.order_id = main.id
                  left join loan_apply_compensation compensation on compensation.id = deputy_.bank_repay_imp_record_id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = deputy_.bank_repay_imp_record_id and deputy_.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_partner_instead_pay_review'">
                  left join loan_process_instead_pay deputy_ on deputy_.order_id = main.id
                  left join loan_apply_compensation compensation on compensation.id = deputy_.bank_repay_imp_record_id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = deputy_.bank_repay_imp_record_id and deputy_.order_id = join_rep.order_id
              </if>

              <if test="taskDefinitionKey == 'usertask_collection_workbench'">
                  left join bank_urge_record join_urgerecord        on main.id          = join_urgerecord.order_id
                  left join employee sendee                         on join_urgerecord.sendee   = sendee.id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = join_urgerecord.bank_repay_imp_record_id and join_urgerecord.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_visit_collection_review'">
                  left join bank_urge_record join_urgerecord        on main.id          = join_urgerecord.order_id
                  left join employee sendee                         on join_urgerecord.sendee   = sendee.id
                  left join loan_process_collection deputy_c on deputy_c.order_id = main.id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = join_urgerecord.bank_repay_imp_record_id and join_urgerecord.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_visit_collection'">
                  left join bank_urge_record join_urgerecord        on main.id          = join_urgerecord.order_id
                  left join employee sendee                         on join_urgerecord.sendee   = sendee.id
                  left join loan_process_collection deputy_c on deputy_c.order_id = main.id
                  left join visit_door door on door.bank_repay_imp_record_id = join_urgerecord.bank_repay_imp_record_id
                  and door.order_id = join_urgerecord.order_id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = join_urgerecord.bank_repay_imp_record_id and join_urgerecord.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_car_handle'">
                  left join bank_urge_record join_urgerecord        on main.id          = join_urgerecord.order_id
                  left join employee sendee                         on join_urgerecord.sendee   = sendee.id
                  left join loan_process_collection deputy_c on deputy_c.order_id = main.id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = join_urgerecord.bank_repay_imp_record_id and join_urgerecord.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_car_out'">
                  left join bank_urge_record join_urgerecord        on main.id          = join_urgerecord.order_id
                  left join employee sendee                         on join_urgerecord.sendee   = sendee.id
                  left join loan_process_collection deputy_c on deputy_c.order_id = main.id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = join_urgerecord.bank_repay_imp_record_id and join_urgerecord.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_settle_order'">
                  left join bank_urge_record join_urgerecord        on main.id          = join_urgerecord.order_id
                  left join employee sendee                         on join_urgerecord.sendee   = sendee.id
                  left join loan_process_collection deputy_c on deputy_c.order_id = main.id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = join_urgerecord.bank_repay_imp_record_id and join_urgerecord.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_legal_review'">
                  left join bank_urge_record join_urgerecord        on main.id          = join_urgerecord.order_id
                  left join employee sendee                         on join_urgerecord.sendee   = sendee.id
                  left join loan_process_legal deputy_l on deputy_l.order_id = main.id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = join_urgerecord.bank_repay_imp_record_id and join_urgerecord.order_id = join_rep.order_id
              </if>
              <if test="taskDefinitionKey == 'usertask_legal_record'">
                  left join bank_urge_record join_urgerecord        on main.id          = join_urgerecord.order_id
                  left join employee sendee                         on join_urgerecord.sendee   = sendee.id
                  left join loan_process_legal deputy_l             on deputy_l.order_id = main.id
                  left join bank_file_list_record join_rep          on join_rep.bank_file_list_id = join_urgerecord.bank_repay_imp_record_id and join_urgerecord.order_id = join_rep.order_id
              </if>

              <if test="taskDefinitionKey == 'usertask_bridge_handle'
                          || taskDefinitionKey == 'usertask_bridge_repay_record'
                          || taskDefinitionKey == 'usertask_bridge_interest_record'
                          || taskDefinitionKey == 'usertask_bridge_repay_info'">
                  left join loan_process_bridge        deputy_b         on deputy_b.order_id = main.id
                  left join conf_third_real_bridge_process real_b       on deputy_b.id = real_b.bridge_process_id
                  left join conf_third_party_money conf_t               on real_b.conf_third_party_id = conf_t.id
                  left join third_party_fund_business  third_party      on third_party.bridge_procecss_id    = deputy_b.id
              </if>
              <if test="taskDefinitionKey == 'usertask_video_review' ||
                                taskDefinitionKey == 'usertask_under_line_video_review'">
                  left join video_face_num videonum                 on videonum.order_id = main.id
              </if>

              where 1=1
              <if test="taskStatus != 0">
                  <choose>
                      <when test="taskDefinitionKey == 'usertask_settle_order'">
                          and deputy.order_status = 2
                      </when>
                      <otherwise>
                          and deputy.order_status = 1
                      </otherwise>
                  </choose>
              </if>
              <choose>
                  <when test="taskDefinitionKey == 'usertask_credit_apply'">
                      <choose>
                          <when test="fuse == true">
                              AND case
                                      when
                                        #{taskStatus} = 0 then deputy.credit_apply != 0
                                      when
                                        #{taskStatus} = 2 then deputy.credit_apply = 2 or deputy.credit_apply = 3
                                      else deputy.credit_apply = #{taskStatus} end
                          </when>
                          <otherwise>
                              AND case when #{taskStatus} = 0 then deputy.credit_apply != 0             else deputy.credit_apply                     = #{taskStatus} end
                          </otherwise>
                      </choose>
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bank_credit_record'">
                      AND case when #{taskStatus} = 0 then deputy.bank_credit_record != 0
                               else deputy.bank_credit_record = #{taskStatus}
                          end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_social_credit_record'">
                      AND case when #{taskStatus} = 0 then deputy.social_credit_record != 0             else deputy.social_credit_record             = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_loan_apply'">
                      <choose>
                          <when test="fuse == true">
                              AND case
                                      when
                                         #{taskStatus} = 0 then deputy.loan_apply != 0
                                      when
                                         #{taskStatus} = 2 then deputy.loan_apply = 2 or deputy.loan_apply = 3
                                      else
                                          deputy.loan_apply = #{taskStatus} end
                          </when>
                          <otherwise>
                              AND case when #{taskStatus} = 0 then deputy.loan_apply != 0                       else deputy.loan_apply                       = #{taskStatus} end
                          </otherwise>
                      </choose>
                  </when>
                  <when test="taskDefinitionKey == 'usertask_visit_verify'">
                      <choose>
                          <when test="fuse == true">
                              AND case
                              when
                              #{taskStatus} = 0 then deputy.visit_verify != 0
                              when
                              #{taskStatus} = 2 then deputy.visit_verify = 2 or deputy.visit_verify = 3
                              else
                              deputy.visit_verify = #{taskStatus} end
                          </when>
                          <otherwise>
                              AND case when #{taskStatus} = 0 then deputy.visit_verify != 0                     else deputy.visit_verify                     = #{taskStatus} end
                          </otherwise>
                      </choose>
                  </when>
                  <when test="taskDefinitionKey == 'usertask_telephone_verify'">
                      AND useLevelGetTaskStatus(#{telephoneVerifyLevel},deputy.telephone_verify) !=-1
                      AND case when #{taskStatus} = 0 then deputy.telephone_verify != 0 else deputy.telephone_verify = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_business_pay'">
                      AND case when #{taskStatus} = 0 then deputy.business_pay  != 0                              else deputy.business_pay                               = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'servicetask_financial_scheme'">
                      AND case when #{taskStatus} = 0 then deputy.financial_scheme  != 0                          else deputy.financial_scheme                           = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bank_card_record'">
                      AND case when #{taskStatus} = 0 then deputy.bank_card_record  != 0                          else deputy.bank_card_record                           = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_car_insurance'">
                      AND case when #{taskStatus} = 0 then deputy.car_insurance != 0                    else deputy.car_insurance                    = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_vehicle_information'">
                      AND case when #{taskStatus} = 0 then deputy.vehicle_information != 0              else deputy.vehicle_information              = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_apply_license_plate_deposit_info'">
                      AND case when #{taskStatus} = 0 then deputy.apply_license_plate_deposit_info != 0 else deputy.apply_license_plate_deposit_info = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_install_gps'">
                      AND case when #{taskStatus} = 0 then deputy.install_gps != 0                      else deputy.install_gps                      = #{taskStatus} end
                      AND join_i.gps_num>0
                  </when>
                  <when test="taskDefinitionKey == 'usertask_commit_key'">
                      AND case when #{taskStatus} = 0 then deputy.commit_key != 0                       else deputy.commit_key                       = #{taskStatus} end
                      AND join_i.car_key = 1
                  </when>
                  <when test="taskDefinitionKey == 'usertask_material_review'">
                      AND case when #{taskStatus} = 0 then deputy.material_review != 0                  else deputy.material_review                  = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_material_print_review'">
                      AND case when #{taskStatus} = 0 then deputy.material_print_review != 0            else deputy.material_print_review            = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_business_review'">
                      AND case when #{taskStatus} = 0 then deputy.business_review != 0                  else deputy.business_review                  = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_loan_review'">
                      AND case when #{taskStatus} = 0 then deputy.loan_review != 0                      else deputy.loan_review                      = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_remit_review'">
                      AND case when #{taskStatus} = 0 then deputy.remit_review  != 0                        else deputy.remit_review                     = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bank_lend_record'">
                      AND case when #{taskStatus} = 0 then deputy.bank_lend_record  != 0                          else deputy.bank_lend_record                           = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_info_supplement'">
                      AND case when #{taskStatus} = 0 then join_s.status  != 0                          else join_s.status                           = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_financial_scheme_modify_apply'">
                      AND case when #{taskStatus} = 0 then join_his.status  != 0                          else join_his.status                       = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_financial_scheme_modify_apply_review'">
                      AND useLevelGetTaskStatus(#{telephoneVerifyLevel},join_his.status) !=-1
                      AND case when #{taskStatus} = 0 then join_his.status != 0 else join_his.status = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_refund_apply'">
                      AND case when #{taskStatus} = 0 then join_refund.status  != 0                      else join_refund.status             = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_refund_apply_review'">
                      AND case when #{taskStatus} = 0 then join_refund.status  != 0                      else join_refund.status             = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_customer_repay_plan'">
                      AND case when #{taskStatus} = 0 then deputy.bank_card_record  != 0                 else deputy.bank_card_record        = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bank_open_card'">
                      AND case when #{taskStatus} = 0 then deputy.bank_open_card != 0                    else deputy.bank_open_card          = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_apply_instalment'">
                      AND case when #{taskStatus} = 0 then deputy.apply_instalment != 0                  else deputy.apply_instalment        = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bank_card_send'">
                      AND case when #{taskStatus} = 0 then deputy.bank_card_send != 0                    else deputy.bank_card_send        = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_loan_info_record'">
                      AND case when #{taskStatus} = 0 then deputy.loan_info_record != 0                  else deputy.loan_info_record        = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_video_review'">
                      AND case when #{taskStatus} = 0 then deputy.video_review != 0
                      else deputy.video_review        = #{taskStatus} end
                      AND  case when join_b.bank = '中国工商银行哈尔滨顾乡支行' then true
                      when join_b.bank = '中国工商银行南京江宁支行' then true
                      else
                      1 = if( (SELECT count( id ) FROM video_face_log WHERE order_id = main.id) &gt; 0, 1, 0 )
                      end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_under_line_video_review'">
                      AND case when #{taskStatus} = 0 then deputy.under_line_video_review != 0
                      else deputy.under_line_video_review        = #{taskStatus} end

                  </when>
                  <when test="taskDefinitionKey == 'usertask_apply_instead_pay'">
                      AND case when #{taskStatus} = 0 then deputy_.apply_instead_pay != 0                else deputy_.apply_instead_pay        = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_finance_instead_pay_review'">
                      AND case when #{taskStatus} = 0 then deputy_.finance_instead_pay_review != 0       else deputy_.finance_instead_pay_review        = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_partner_instead_pay'">
                      AND case when #{taskStatus} = 0 then deputy_.partner_instead_pay != 0              else deputy_.partner_instead_pay         = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_partner_instead_pay_review'">
                      AND case when #{taskStatus} = 0 then deputy_.partner_instead_pay_review!= 0        else deputy_.partner_instead_pay_review        = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_collection_workbench'">
                      AND case when #{taskStatus} = 0 then join_urgerecord.urge_status != 0              else join_urgerecord.urge_status         = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_visit_collection_review'">
                      AND case when #{taskStatus} = 0 then deputy_c.visit_collection_review != 0         else deputy_c.visit_collection_review    = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_visit_collection'">
                      AND case when #{taskStatus} = 0 then deputy_c.visit_collection != 0                else deputy_c.visit_collection    = #{taskStatus} end
                      AND case when #{taskStatus} = 0 then door.status != 0                              else door.status                  = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_car_handle'">
                      AND case when #{taskStatus} = 0 then deputy_c.car_handle != 0                     else deputy_c.car_handle    = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_car_out'">
                      AND case when #{taskStatus} = 0 then deputy_c.car_out != 0                        else deputy_c.car_out    = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_settle_order'">
                      AND case when #{taskStatus} = 0 then deputy_c.settle_order != 0
                               when #{taskStatus} = 1 then deputy.order_status = 2
                               else deputy_c.settle_order    = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_legal_review'">
                      AND case when #{taskStatus} = 0 then deputy_l.legal_review != 0                   else deputy_l.legal_review    = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_legal_record'">
                      AND case when #{taskStatus} = 0 then deputy_l.legal_record != 0                   else deputy_l.legal_record    = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_material_manage'">
                      AND case when #{taskStatus} = 0 then deputy.material_manage != 0                   else deputy.material_manage   = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bridge_handle'">
                      AND case when #{lendStatus} = 1 then deputy_b.bridge_handle in (2,3) and deputy_b.order_status = 1
                                       and if((select count(*) from third_party_fund_business where bridge_procecss_id=deputy_b.id and deputy_b.order_status = 1 and lend_status in(3,4,5,6,7,8,9))=1,false,true)
                               when #{lendStatus} = 2 then deputy_b.bridge_handle = 1 and deputy_b.order_status = 1
                               when #{lendStatus} = 3 then deputy_b.bridge_handle = 2 and third_party.lend_status in(3,8) and deputy_b.order_status = 1
                               when #{lendStatus} = 4 then deputy_b.bridge_handle = 2 and third_party.lend_status in(5,6,9) and deputy_b.order_status = 1
                               when #{lendStatus} = 5 then deputy_b.bridge_handle = 2 and third_party.lend_status in(4,7) and deputy_b.order_status = 1
                      end
                      <if test="startLendDate !=null">
                          AND third_party.lend_date &gt;= #{startLendDate}
                      </if>
                      <if test="endLendDate !=null">
                          AND third_party.lend_date &lt;= #{endLendDate}
                      </if>
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bridge_repay_record'">
                      AND case when #{taskStatus} = 0 then deputy_b.bridge_repay_record !=0 else deputy_b.bridge_repay_record = #{taskStatus} end
                      <if test="startLendDate !=null">
                          AND third_party.lend_date &gt;= #{startLendDate}
                      </if>
                      <if test="endLendDate !=null">
                          AND third_party.lend_date &lt;= #{endLendDate}
                      </if>

                      <if test="startRepayDate !=null">
                          AND third_party.repay_date &gt;= #{startRepayDate}
                      </if>
                      <if test="endRepayDate !=null">
                          AND third_party.repay_date &lt;= #{endRepayDate}
                      </if>
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bridge_interest_record'">
                      AND case when #{taskStatus} = 0 then deputy_b.bridge_interest_record !=0 else deputy_b.bridge_interest_record = #{taskStatus} end
                  </when>
                  <when test="taskDefinitionKey == 'usertask_bridge_repay_info'">
                      AND case when #{taskStatus} = 0 then deputy_b.bridge_repay_info !=0 else deputy_b.bridge_repay_info = #{taskStatus} end
                      <if test="startRepayDate !=null">
                          AND third_party.repay_date &gt;= #{startRepayDate}
                      </if>
                      <if test="endRepayDate !=null">
                          AND third_party.repay_date &lt;= #{endRepayDate}
                      </if>
                  </when>
                  <otherwise>
                      AND 1=2
                  </otherwise>
              </choose>
              ) tab
              where 1=1
              <if test="taskDefinitionKey == 'usertask_collection_workbench'">
                  AND case when #{collectionLevel}  = 7 then true and case when  #{taskStatus} = 2 then tab.sendee is null else true end
                           when #{collectionLevel}  = 6 then tab.sendee = #{employeeId}
                  else true end
              </if>
            AND CASE WHEN #{maxGroupLevel}  = 0 THEN false
                     when  #{maxGroupLevel} = 1 then
              tab.salesmanId in
                  <foreach item="item" index="index" collection="juniorIds" open="(" separator="," close=")">
                      #{item}
                  </foreach>
              else true end
              <if test="orderId != null">
                  AND tab.id = #{orderId}
              </if>
            <if test="partnerCode != null and partnerCode !=''">
                AND tab.partnerCode = #{partnerCode}
            </if>
            <if test="partnerGroup != null and partnerGroup !=''">
                AND tab.partnerGroup = #{partnerGroup}
            </if>
              <if test="customer != null and customer != ''">
                  AND tab.customer LIKE CONCAT('%', #{customer} ,'%')
              </if>
              <if test="mobile != null">
                  AND tab.mobile = #{mobile}
              </if>
              <if test="idCard != null">
                  AND tab.idCard = #{idCard}
              </if>
              <if test="salesmanId != null">
                  AND tab.salesmanId = #{salesmanId}
              </if>
              <if test="bizAreaId != null">
                  AND
                  case
                    when (select level from base_area where area_id = #{bizAreaId}) = 0 then 1=1
                    when (select level from base_area where area_id = #{bizAreaId}) = 1 then tab.bizAreaId in (select area_id from base_area where parent_area_id = #{bizAreaId})
                    when (select level from base_area where area_id = #{bizAreaId}) = 2 then tab.bizAreaId = #{bizAreaId}
                  else 1=2
                  end
              </if>
              <if test="loanBank != null">
                  AND tab.bank = #{loanBank}
              </if>
              <if test="taskDefinitionKey == 'usertask_info_supplement'">
                  <if test="supplementType != null">
                      AND tab.supplementType = #{supplementType}
                  </if>
              </if>
              <if test="loanAmountType != null">
                  <if test="loanAmountType == 1">
                      AND tab.loanAmount &lt;= 100000
                  </if>
                  <if test="loanAmountType == 2">
                      AND tab.loanAmount &gt; 100000 AND tab.loanAmount &lt;= 300000
                  </if>
                  <if test="loanAmountType == 3">
                      AND tab.loanAmount &gt; 300000
                  </if>
              </if>
              <if test="signType != null">
                  <if test="signType == 1">
                      AND tab.signRate &lt;= 10
                  </if>
                  <if test="signType == 2">
                      AND tab.signRate &gt; 10 AND tab.signRate &lt;= 20
                  </if>
                  <if test="signType == 3">
                      AND tab.signRate &gt; 20
                  </if>
              </if>
              <if test="minRemitAmount != null">
                  AND tab.remitAmount &gt;=  #{minRemitAmount}
              </if>
            <if test="maxRemitAmount != null">
                AND tab.remitAmount &lt;= #{maxRemitAmount}
            </if>
              <if test="carType != null">
                  AND tab.carType = #{carType}
              </if>
              <if test="partnerId != null">
                  AND tab.partnerId = #{partnerId}
              </if>
              <if test="loanTime != null">
                  AND tab.loanTime = #{loanTime}
              </if>
              <if test="startOrderGmtCreate != null">
                  AND TO_DAYS(tab.orderGmtCreate) &gt;= TO_DAYS(#{startOrderGmtCreate})
              </if>
              <if test="endOrderGmtCreate != null">
                  AND TO_DAYS(tab.orderGmtCreate) &lt;= TO_DAYS(#{endOrderGmtCreate})
              </if>
              <if test="taskDefinitionKey == 'usertask_customer_repay_plan'">
                  <if test="isStraighten != null">
                      AND tab.isStraighten = #{isStraighten}
                  </if>
              </if>
              <if test="taskDefinitionKey == 'usertask_collection_workbench'
              || taskDefinitionKey == 'usertask_visit_collection_review'
              || taskDefinitionKey == 'usertask_visit_collection'
              || taskDefinitionKey == 'usertask_car_handle'
              || taskDefinitionKey == 'usertask_car_out'
              || taskDefinitionKey == 'usertask_settle_order'
              || taskDefinitionKey == 'usertask_legal_review'
              || taskDefinitionKey == 'usertask_legal_record'
              ">
                  <if test="sendee != null">
                      AND tab.sendee = #{sendee}
                  </if>
                  <if test="isRepayment != null">
                      AND tab.isRepayment = #{isRepayment}
                  </if>
              </if>
            <if test="taskDefinitionKey == 'usertask_bank_credit_record' or taskDefinitionKey == 'usertask_credit_apply' or taskDefinitionKey == 'usertask_bank_open_card' or taskDefinitionKey == 'usertask_apply_instalment'">
                <if test="serialStatus != null">
                    <choose>
                        <when test="serialStatus == 'except'">
                            <choose>
                                <when test="bankOpenCardOrder == 'except'">
                                    AND tab.id not in  <!--  出现一次就判定为除外 -->
                                    (
                                      <choose>
                                          <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                              <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                                  #{item}
                                              </foreach>
                                          </when>
                                          <otherwise>
                                              select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                          </otherwise>
                                      </choose>
                                    )
                                    AND
                                    case when tab.openCardOrder = 1 then true
                                         when tab.openCardOrder = 0 then tab.telephoneVerifyStatus = 1
                                    else
                                        false
                                    end

                                </when>
                                <when test="bankOpenCardOrder == 'having'">
                                    AND tab.id not in  <!--  出现一次就判定为除外 -->
                                    (
                                      <choose>
                                          <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                              <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                                  #{item}
                                              </foreach>
                                          </when>
                                          <otherwise>
                                              select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                          </otherwise>
                                      </choose>
                                    )
                                    AND
                                    case when tab.openCardOrder = 0 then tab.telephoneVerifyStatus  != 1
                                    else
                                        false
                                    end
                                </when>
                                <otherwise>
                                    AND tab.id not in  <!--  出现一次就判定为除外 -->
                                    (
                                      <choose>
                                          <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                              <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                                  #{item}
                                              </foreach>
                                          </when>
                                          <otherwise>
                                              select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                          </otherwise>
                                      </choose>
                                    )
                                </otherwise>

                            </choose>
                            AND  if((select count(*) from loan_customer where principal_cust_id= tab.customerId and cust_type in(1,2,3) and credit_exp_flag=1)>0,true,false)
                        </when>

                        <when test="serialStatus == 'exception'">
                            AND tab.id in  <!--  有一个异常,就判定为这个单子异常 -->
                            (
                              <choose>
                                  <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                      <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                          #{item}
                                      </foreach>
                                  </when>
                                  <otherwise>
                                      select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                  </otherwise>
                              </choose>
                            )
                        </when>
                        <when test="serialStatus == 'pending'">
                            AND tab.id in <!--  全部成功才算成功 -->
                            (
                              <choose>
                                  <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                      <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                          #{item}
                                      </foreach>
                                  </when>
                                  <otherwise>
                                      select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                  </otherwise>
                              </choose>
                            )
                        </when>
                        <when test="serialStatus == 'success'">
                            AND tab.id in <!--  全部成功才算成功 -->
                              (
                                <choose>
                                    <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                        <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                            #{item}
                                        </foreach>
                                    </when>
                                    <otherwise>
                                        select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                    </otherwise>
                                </choose>
                              )
                        </when>
                        <when test="serialStatus == 'failure'">
                            AND tab.id in <!--  全部成功才算成功 -->
                              (
                                <choose>
                                    <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                        <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                            #{item}
                                        </foreach>
                                    </when>
                                    <otherwise>
                                        select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                    </otherwise>
                                </choose>
                              )
                        </when>
                        <when test="serialStatus == 'back'">
                            AND tab.id in <!--  有一个退回就判定单子为退回 -->
                            (
                              <choose>
                                  <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                      <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                          #{item}
                                      </foreach>
                                  </when>
                                  <otherwise>
                                      select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                  </otherwise>
                              </choose>
                            )
                        </when>
                        <when test="serialStatus == 'process'">
                            AND tab.id in <!--  全部处理中才算处理中 -->
                            (
                                <choose>
                                    <when test="bankInterfaceSerialOrderidList != null and bankInterfaceSerialOrderidList.size() > 0">
                                        <foreach item="item" index="index" collection="bankInterfaceSerialOrderidList" separator=",">
                                            #{item}
                                        </foreach>
                                    </when>
                                    <otherwise>
                                        select temp.id from (SELECT 1 as id) temp  where temp.id =2
                                    </otherwise>
                                </choose>
                             )
                        </when>
                        <when test="serialStatus == 'export'">
                           AND  if((select count(*) from loan_customer where principal_cust_id= tab.customerId and cust_type in(1,2,3) and credit_exp_flag=1)>0,false,true)
                        </when>
                        <otherwise>
                            AND 1=2
                        </otherwise>
                    </choose>
                </if>
            </if>
            <if test="relevanceCustomerName != null">
                AND
                tab.id in
                (
                  (select id from loan_order where loan_customer_id
                    in (select principal_cust_id from loan_customer where name = #{relevanceCustomerName})
                  and loan_customer_id not in (select id from loan_customer where name = #{relevanceCustomerName})
                  )
                )
            </if>
            ) task
            left join task_distribution taskdis
            on task.taskId = taskdis.task_id and task.taskKey = taskdis.task_key
            <if test="taskStatus != 0">
                <choose>
                    <when test="pull == false">
                        where task.taskId NOT IN ( ( SELECT distinct task_id FROM task_distribution where task_key =
                        #{taskDefinitionKey} ) )
                    </when>
                    <otherwise>
                        having
                        case when #{maxGroupLevel} = 3 then 1=1
                        when receiveManId is not null then
                        case when receiveManId = #{employeeId} then 1=1 else 1=2 end
                        else 1=1 end
                        <if test="(taskDefinitionKey == 'usertask_financial_scheme_modify_apply_review' or taskDefinitionKey == 'usertask_telephone_verify') and taskStatus == 2">
                            and
                            case when #{maxGroupLevel} = 3 then 1=1
                            else
                            task.taskId IN ( ( SELECT distinct task_id FROM task_distribution where task_key =
                            #{taskDefinitionKey} ) )
                            end
                        </if>
                    </otherwise>
                </choose>
            </if>
            ) complex
            left JOIN
            current_node_manager complex_log on complex_log.order_id = complex.id
            where 1=1
            and
            case when #{maxGroupLevel} = 3 then 1=1
            else 1=1
            <if test="bizAreaIdList != null and bizAreaIdList.size() > 0">
                and
                complex.partnerId in
                <foreach item="item" index="index" collection="bizAreaIdList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="bankList != null and bankList.size() > 0">
                and
                complex.bank in
                <foreach item="item" index="index" collection="bankList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            end
            <if test="startLoanGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_loan_apply_create_time) &gt;= TO_DAYS(#{startLoanGmtCreate})
            </if>
            <if test="endLoanGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_loan_apply_create_time) &lt;= TO_DAYS(#{endLoanGmtCreate})
            </if>
            <if test="startCreditGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_credit_apply_create_time) &gt;= TO_DAYS(#{startCreditGmtCreate})
            </if>
            <if test="endCreditGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_credit_apply_create_time) &lt;= TO_DAYS(#{endCreditGmtCreate})
            </if>
            <if test="startPrintGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_material_print_review_create_time) &gt;= TO_DAYS(#{startPrintGmtCreate})
            </if>
            <if test="endPrintGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_material_print_review_create_time) &lt;= TO_DAYS(#{endPrintGmtCreate})
            </if>
            <if test="startRemitGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_remit_review_create_time) &gt;= TO_DAYS(#{startRemitGmtCreate})
            </if>
            <if test="endRemitGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_remit_review_create_time) &lt;= TO_DAYS(#{endRemitGmtCreate})
            </if>
            <if test="taskDefinitionKey == 'usertask_video_review'">
                <if test="videoFaceFlag != null">
                    and case when #{videoFaceFlag} = '1' then complex.taskDisStatus = 1
                    when #{videoFaceFlag} = '2'          then complex.taskDisStatus = 2
                    else (complex.taskDisStatus != 1
                    AND complex.taskDisStatus != 2 ) or complex.taskDisStatus is null
                    end
                </if>
            </if>
            <if test="taskDefinitionKey == 'usertask_telephone_verify'">
                <choose>
                    <when test="taskDefinitionKey == 'usertask_collection_workbench'">
                        order by complex.urgeGmtCreate ASC
                    </when>
                    <when test="taskStatus == 2 or taskStatus == 4 or taskStatus == 5 or taskStatus == 6  or pull == false ">
                        order by loanGmtCreate asc
                    </when>
                    <otherwise>
                        order by telephoneGmtCreate DESC
                    </otherwise>
                </choose>
            </if>
            <if test="taskDefinitionKey != 'usertask_telephone_verify' and taskDefinitionKey != 'usertask_bank_credit_record' ">
            <choose>
                <when test="taskDefinitionKey == 'usertask_collection_workbench'">
                    order by complex.urgeGmtCreate ASC
                </when>
                <when test="taskStatus == 0">
                    order by complex.orderGmtCreate DESC ,complex.taskStatus ASC
                </when>
                <when test="taskStatus == 1">
                    order by complex.orderGmtCreate DESC
                </when>
                <when test="taskStatus == 2">
                    order by complex.orderGmtCreate ASC
                </when>
                <when test="taskStatus == 3">
                    order by complex.orderGmtCreate ASC
                </when>
                <otherwise>
                    order by complex.orderGmtCreate DESC
                </otherwise>
            </choose>
            </if>
            <if test="taskDefinitionKey == 'usertask_bank_credit_record'">
                <choose>
                <when test="taskStatus == 0">
                    order by complex.creditApplySubmitTime DESC ,complex.taskStatus ASC
                </when>
                <when test="taskStatus == 1">
                    order by complex.creditApplySubmitTime DESC
                </when>
                <when test="taskStatus == 2">
                    order by complex.creditApplySubmitTime ASC
                </when>
                <when test="taskStatus == 3">
                    order by complex.creditApplySubmitTime ASC
                </when>
                <otherwise>
                    order by complex.creditApplySubmitTime DESC
                </otherwise>
                </choose>
            </if>
        </select>


    <select id="selectScheduleTaskList" resultType="com.yunche.loan.domain.vo.ScheduleTaskVO">

        select complex.* from
        (
        select task.*,
        taskdis.status as taskDisStatus,
        taskdis.sendee as receiveManId,
        taskdis.sendee_name as receiveManName
        from
        (
        SELECT
        jorder.id AS taskId,
        result.PROC_INST_ID_ AS processId,
        result.TASK_DEF_KEY_ AS taskKey,
        DATE_FORMAT(result.CREATE_TIME_,'%Y-%m-%d %H:%i:%S') AS createScheduleDate,
        null AS taskDescription,
        jorder.id AS orderId,
        jp.name AS partner,
        je.name AS salesman,
        jb.bank AS bank,
        jc.name AS name,
        jc.id_card AS idCard,
        jc.mobile AS mobile,
        ji.car_type AS carType,
        useGetCarName(ji.car_detail_id) AS carName,
        jf.down_payment_ratio AS downPaymentRatio,
        jf.loan_time AS loanTime,
        jf.loan_amount AS loanAmount,
        CONCAT('待办',result.NAME_) AS taskStatusExplanation,
        jb.partner_id AS partnerId,
        jb.salesman_id AS salesmanId,
        jb.area_id AS bizAreaId,
        case when result.TASK_DEF_KEY_ = 'usertask_telephone_verify' then
        case when lp.telephone_verify &lt; #{telephoneVerifyLevel} and lp.telephone_verify!=1 and lp.telephone_verify!=0
        then 2 else 1 end
        else 2 end AS filtration,
        null AS supplementOrderId,
        null AS supplementType,
        null AS supplementTypeText,
        null AS his_id,
        null AS refund_id,
        null AS sendee
        from
        (
        SELECT DISTINCT RES.* FROM ACT_RU_TASK RES
        inner join
        ACT_RU_IDENTITYLINK I
        ON I.TASK_ID_ = RES.ID_
        WHERE RES.ASSIGNEE_ IS NULL AND I.TYPE_ = 'candidate' AND
        ( I.GROUP_ID_ IN
        (
        SELECT name FROM user_group g
        INNER JOIN
        (SELECT user_group_id FROM employee_rela_user_group WHERE employee_id = #{employeeId}) e
        ON e.user_group_id = g.id
        )
        )
        ) result
        INNER JOIN loan_order jorder ON jorder.process_inst_id = result.PROC_INST_ID_
        LEFT JOIN loan_base_info jb ON jb.id = jorder.loan_base_info_id
        LEFT JOIN partner jp ON jp.id = jb.partner_id
        LEFT JOIN employee je ON je.id = jb.salesman_id
        LEFT JOIN loan_customer jc ON jc.id = jorder.loan_customer_id
        LEFT JOIN loan_car_info ji ON ji.id = jorder.loan_car_info_id
        LEFT JOIN loan_financial_plan jf ON jf.id = jorder.loan_financial_plan_id
        INNER JOIN loan_process lp ON jorder.id = lp.order_id and lp.order_status = 1
        having filtration = 2
        union all

        SELECT
        supplement.id AS taskId,
        jorder.process_inst_id AS processId,
        ("usertask_info_supplement") AS taskKey,
        DATE_FORMAT(supplement.start_time,'%Y-%m-%d %H:%i:%S') AS createScheduleDate,
        null AS taskDescription,
        jorder.id AS orderId,
        jp.name AS partner,
        je.name AS salesman,
        jb.bank AS bank,
        jc.name AS name,
        jc.id_card AS idCard,
        jc.mobile AS mobile,
        ji.car_type AS carType,
        useGetCarName(ji.car_detail_id) AS carName,
        jf.down_payment_ratio AS downPaymentRatio,
        jf.loan_time AS loanTime,
        jf.loan_amount AS loanAmount,
        ("待办资料增补") AS taskStatusExplanation,
        jb.partner_id AS partnerId,
        jb.salesman_id AS salesmanId,
        jb.area_id AS bizAreaId,
        (2) AS filtration,
        supplement.id AS supplementOrderId,
        supplement.type AS supplementType,
        useSupplementTypeTxt(supplement.type) AS supplementTypeText,
        null AS his_id,
        null AS refund_id,
        null AS sendee
        from loan_info_supplement supplement
        INNER JOIN loan_order jorder ON jorder.id = supplement.order_id
        LEFT JOIN loan_base_info jb ON jb.id = jorder.loan_base_info_id
        LEFT JOIN partner jp ON jp.id = jb.partner_id
        LEFT JOIN employee je ON je.id = jb.salesman_id
        LEFT JOIN loan_customer jc ON jc.id = jorder.loan_customer_id
        LEFT JOIN loan_car_info ji ON ji.id = jorder.loan_car_info_id
        LEFT JOIN loan_financial_plan jf ON jf.id = jorder.loan_financial_plan_id
        INNER JOIN loan_process lp ON jorder.id = lp.order_id and lp.order_status = 1
        where supplement.status = 2
        having filtration = 2
        and
        case when #{materialSupplementLevel} <![CDATA[>=]]> 1 then true else false end
        union all

        SELECT
        his.id AS taskId,
        jorder.process_inst_id AS processId,
        case when his.status = 3 then 'usertask_financial_scheme_modify_apply'
        when his.status !=1 and his.status !=3 then 'usertask_financial_scheme_modify_apply_review'
        else null end AS taskKey,
        DATE_FORMAT(
        case when his.status = 3 then
        current_reject.financial_review_create_time
        when his.status !=1 and his.status !=3 then
        current.usertask_financial_scheme_modify_apply_create_time
        else null end
        ,'%Y-%m-%d %H:%i:%S') AS createScheduleDate,
        NULL AS taskDescription,
        jorder.id AS orderId,
        jp.name AS partner,
        je.name AS salesman,
        jb.bank AS bank,
        jc.name AS name,
        jc.id_card AS idCard,
        jc.mobile AS mobile,
        ji.car_type AS carType,
        useGetCarName(ji.car_detail_id) AS carName,
        jf.down_payment_ratio AS downPaymentRatio,
        jf.loan_time AS loanTime,
        jf.loan_amount AS loanAmount,
        case when his.status = 3 then '待办金融方案修改申请'
        when his.status !=1 and his.status !=3 then '待办金融方案修改审核'
        else null end AS taskStatusExplanation,
        jb.partner_id AS partnerId,
        jb.salesman_id AS salesmanId,
        jb.area_id AS bizAreaId,
        case when his.status = 3 then 2
        when his.status !=3 and his.status &lt; #{telephoneVerifyLevel} and his.status !=1 then 2 else 1 end AS
        filtration,
        null AS supplementOrderId,
        null AS supplementType,
        null AS supplementTypeText,
        his.id AS his_id,
        null AS refund_id,
        null AS sendee
        from loan_financial_plan_temp_his his
        INNER JOIN loan_order jorder ON jorder.id = his.order_id
        LEFT JOIN loan_base_info jb ON jb.id = jorder.loan_base_info_id
        LEFT JOIN partner jp ON jp.id = jb.partner_id
        LEFT JOIN employee je ON je.id = jb.salesman_id
        LEFT JOIN loan_customer jc ON jc.id = jorder.loan_customer_id
        LEFT JOIN loan_car_info ji ON ji.id = jorder.loan_car_info_id
        LEFT JOIN loan_financial_plan jf ON jf.id = jorder.loan_financial_plan_id
        LEFT JOIN current_node_manager current on jorder.id = current.order_id
        LEFT JOIN current_node_manager_reject current_reject on jorder.id = current_reject.order_id
        INNER JOIN loan_process lp ON jorder.id = lp.order_id and lp.order_status = 1
        where his.status = 2 or his.status = 3
        having filtration = 2 and
        case when taskKey = 'usertask_financial_scheme_modify_apply_review' then
        case when #{telephoneVerifyLevel} <![CDATA[>=]]> 4 then true else false end
        when taskKey = 'usertask_financial_scheme_modify_apply' then
        case when #{financeApplyLevel} <![CDATA[>=]]> 1 then true else false end
        else true end
        union all

        SELECT
        refund.id AS taskId,
        jorder.process_inst_id AS processId,
        case when refund.status = 3 then 'usertask_refund_apply'
        when refund.status = 2 then 'usertask_refund_apply_review'
        else null end AS taskKey,
        DATE_FORMAT(
        case when refund.status = 3 then
        current_reject.refund_review_create_time
        when refund.status = 2 then
        current.usertask_refund_apply_create_time
        else null end
        ,'%Y-%m-%d %H:%i:%S') AS createScheduleDate,
        NULL AS taskDescription,
        jorder.id AS orderId,
        jp.name AS partner,
        je.name AS salesman,
        jb.bank AS bank,
        jc.name AS name,
        jc.id_card AS idCard,
        jc.mobile AS mobile,
        ji.car_type AS carType,
        useGetCarName(ji.car_detail_id) AS carName,
        jf.down_payment_ratio AS downPaymentRatio,
        jf.loan_time AS loanTime,
        jf.loan_amount AS loanAmount,
        case when refund.status = 3 then '待办退款申请'
        when refund.status = 2 then '待办退款申请审核'
        else null end AS taskStatusExplanation,
        jb.partner_id AS partnerId,
        jb.salesman_id AS salesmanId,
        jb.area_id AS bizAreaId,
        (2) AS filtration,
        null AS supplementOrderId,
        null AS supplementType,
        null AS supplementTypeText,
        null AS his_id,
        refund.id AS refund_id,
        null AS sendee
        from loan_refund_apply refund
        INNER JOIN loan_order jorder ON jorder.id = refund.order_id
        LEFT JOIN loan_base_info jb ON jb.id = jorder.loan_base_info_id
        LEFT JOIN partner jp ON jp.id = jb.partner_id
        LEFT JOIN employee je ON je.id = jb.salesman_id
        LEFT JOIN loan_customer jc ON jc.id = jorder.loan_customer_id
        LEFT JOIN loan_car_info ji ON ji.id = jorder.loan_car_info_id
        LEFT JOIN loan_financial_plan jf ON jf.id = jorder.loan_financial_plan_id
        LEFT JOIN current_node_manager current on jorder.id = current.order_id
        LEFT JOIN current_node_manager_reject current_reject on jorder.id = current_reject.order_id
        INNER JOIN loan_process lp ON jorder.id = lp.order_id and lp.order_status = 1
        where refund.status = 2 or refund.status = 3
        having filtration = 2 and
        case when taskKey = 'usertask_refund_apply_review' then
        case when #{financeLevel} <![CDATA[>=]]> 4 then true else false end
        when taskKey = 'usertask_refund_apply' then
        case when #{refundApplyLevel} <![CDATA[>=]]> 1 then true else false end
        else true end
        union all

        SELECT
        jorder.id AS taskId,
        jorder.process_inst_id AS processId,
        ('usertask_collection_workbench') AS taskKey,
        DATE_FORMAT(
        (select collection_date from collection_record where order_id = jorder.id order by collection_date,gmt_create
        desc limit 1)
        ,'%Y-%m-%d %H:%i:%S') AS createScheduleDate,
        NULL AS taskDescription,
        jorder.id AS orderId,
        jp.name AS partner,
        je.name AS salesman,
        jb.bank AS bank,
        jc.name AS name,
        jc.id_card AS idCard,
        jc.mobile AS mobile,
        ji.car_type AS carType,
        useGetCarName(ji.car_detail_id) AS carName,
        jf.down_payment_ratio AS downPaymentRatio,
        jf.loan_time AS loanTime,
        jf.loan_amount AS loanAmount,
        ('待办催收') AS taskStatusExplanation,
        jb.partner_id AS partnerId,
        jb.salesman_id AS salesmanId,
        jb.area_id AS bizAreaId,
        (2) AS filtration,
        null AS supplementOrderId,
        null AS supplementType,
        null AS supplementTypeText,
        null AS his_id,
        null AS refund_id,
        urge.sendee AS sendee
        from bank_urge_record urge
        INNER JOIN loan_order jorder ON jorder.id = urge.order_id
        LEFT JOIN loan_base_info jb ON jb.id = jorder.loan_base_info_id
        LEFT JOIN partner jp ON jp.id = jb.partner_id
        LEFT JOIN employee je ON je.id = jb.salesman_id
        LEFT JOIN loan_customer jc ON jc.id = jorder.loan_customer_id
        LEFT JOIN loan_car_info ji ON ji.id = jorder.loan_car_info_id
        LEFT JOIN loan_financial_plan jf ON jf.id = jorder.loan_financial_plan_id
        INNER JOIN loan_process lp ON jorder.id = lp.order_id and lp.order_status = 1
        where urge.urge_status = 2
        having filtration = 2
        AND
        case when #{collectionLevel} = 7 then true
        when #{collectionLevel} = 6 then sendee = #{employeeId}
        else false end
        )
        task
        left join task_distribution taskdis
        on task.taskId = taskdis.task_id and task.taskKey = taskdis.task_key
        having true
        and case when #{maxGroupLevel} = 0 then false
        when #{maxGroupLevel} = 1 then
        task.salesmanId in
        <foreach item="item" collection="juniorIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        else true end
        and case when #{maxGroupLevel} = 3 then 1=1
        when receiveManId is not null then
        case when receiveManId = #{employeeId} then 1=1 else 1=2 end
        else 1=1
        end
        <if test="key != null">
            and task.taskKey = #{key,jdbcType=VARCHAR}
        </if>
        ) complex
        where 1=1
        and
        case when #{maxGroupLevel} = 3 then 1=1
        else 1=1
        <if test="bizAreaIdList != null and bizAreaIdList.size() > 0">
            and
            complex.partnerId in
            <foreach item="item" index="index" collection="bizAreaIdList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="bankList != null and bankList.size() > 0">
            and
            complex.bank in
            <foreach item="item" index="index" collection="bankList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        END
        ORDER BY complex.createScheduleDate ASC
    </select>


    <!--selectDataFlowTaskList-->
    <select id="selectDataFlowTaskList" parameterType="com.yunche.loan.domain.query.TaskListQuery"
            resultType="com.yunche.loan.domain.vo.TaskListVO">

        SELECT

                            tmp2.*,
                            tmp2.id                              AS order_id,
                            tmp2.taskStatus                      AS taskType,

                            CASE
                                WHEN tmp2.taskStatus = 1  THEN
                                "已提交"
                                WHEN tmp2.taskStatus = 2  THEN
                                "未提交"
                                WHEN tmp2.taskStatus = 21 THEN
                                "待邮寄"
                                WHEN tmp2.taskStatus = 22 THEN
                                "待接收"
                                WHEN tmp2.taskStatus = 3  THEN
                                "已打回"
                                WHEN tmp2.taskStatus = 0  THEN
                                "未执行到此"
                                ELSE
                                "状态异常"
                            END                                 AS taskTypeText

        FROM

            (

                SELECT
                            tmp.*,

                            CASE
                                WHEN #{taskStatus_} != 0 THEN
                                #{taskStatus_}
                                ELSE
                                tmp.taskStatus_1
                            END                                 AS  taskStatus

                FROM

                    (

                        SELECT
                                                CASE

                                                    WHEN df.type = 1 THEN
                                                    pc.data_flow_contract_p2c

                                                    WHEN df.type = 2 THEN
                                                    pc.data_flow_contract_p2c_review

                                                    WHEN df.type = 3 THEN
                                                    pc.data_flow_contract_c2b

                                                    WHEN df.type = 4 THEN
                                                    pc.data_flow_contract_c2b_review

                                                    WHEN df.type = 5 THEN
                                                    pc.data_flow_mortgage_p2c

                                                    WHEN df.type = 6 THEN
                                                    pc.data_flow_mortgage_p2c_review

                                                    WHEN df.type = 7 THEN
                                                    pc.data_flow_mortgage_c2b

                                                    WHEN df.type = 8 THEN
                                                    pc.data_flow_mortgage_c2b_review

                                                    WHEN df.type = 9 THEN
                                                    pc.data_flow_mortgage_b2c

                                                    WHEN df.type = 10 THEN
                                                    pc.data_flow_mortgage_b2c_review

                                                    WHEN df.type = 11 THEN
                                                    pc.data_flow_mortgage_c2p

                                                    WHEN df.type = 12 THEN
                                                    pc.data_flow_mortgage_c2p_review

                                                    WHEN df.type = 13 THEN
                                                    pc.data_flow_register_p2c

                                                    WHEN df.type = 14 THEN
                                                    pc.data_flow_register_p2c_review

                                                    WHEN df.type = 15 THEN
                                                    pc.data_flow_register_c2b

                                                    WHEN df.type = 16 THEN
                                                    pc.data_flow_register_c2b_review

                                                    ELSE
                                                    0

                                                END                                 AS taskStatus_1,

                                                a.id               					AS  id,
                                                c.name    				  			AS  customer,
                                                c.id_card   						AS  idCard,
                                                c.mobile   							AS  mobile,
                                                b.bank								AS  bank,
                                                b.salesman_id     				    AS  salesmanId,
                                                e.name             					AS  salesman,
                                                b.partner_id      					AS  partnerId,
                                                p.name             					AS  partner,
                                                d.name             					AS  departmentName,
                                                df.id              					AS  dataFlowId,
                                                df.type            					AS  dataFlowType

                        FROM                    loan_order           				AS a
                                    LEFT JOIN   loan_process         				AS pc    ON   a.id = pc.order_id
                                    LEFT JOIN   loan_data_flow       				AS df    ON   a.id = df.order_id
                                    LEFT JOIN   loan_customer        				AS c     ON   c.id = a.loan_customer_id
                                    LEFT JOIN   loan_base_info      				AS b     ON   b.id = a.loan_base_info_id
                                    LEFT JOIN   employee             				AS e     ON   e.id = b.salesman_id
                                    LEFT JOIN   department           				AS d     ON	  d.id = e.department_id
                                    LEFT JOIN   partner             				AS p     ON   p.id = b.partner_id
                                    LEFT JOIN   current_node_manager                AS complex_log on complex_log.order_id = a.id

                        <where>
                            <if test="orderId != null and orderId != '' ">
                                AND a.id = #{orderId}
                            </if>
                            <if test="customer != null and customer != '' ">
                                AND	c.name LIKE CONCAT('%', #{customer}, '%')
                            </if>
                            <if test="idCard != null and idCard != '' ">
                                AND c.id_card = #{idCard}
                            </if>
                            <if test="loanBank != null and loanBank != '' ">
                                AND b.bank = #{loanBank}
                            </if>
                            <if test="partnerId != null">
                                AND p.id = #{partnerId}
                            </if>
                            <if test="startPrintGmtCreate != null">
                                AND TO_DAYS(complex_log.usertask_remit_review_create_time) &gt;= TO_DAYS(#{startPrintGmtCreate})
                            </if>
                            <if test="endPrintGmtCreate != null">
                                AND TO_DAYS(complex_log.usertask_remit_review_create_time) &lt;= TO_DAYS(#{endPrintGmtCreate})
                            </if>
                            <if test="dataFlowTypeList != null and dataFlowTypeList.size() > 0">
                                AND  df.type IN
                                <foreach item="item" collection="dataFlowTypeList" open="(" close=")" separator=",">
                                    #{item}
                                </foreach>
                            </if>
                            <if test="bizAreaIdList != null and bizAreaIdList.size() > 0">
                                AND
                                b.partner_id IN
                                <foreach item="item" index="index" collection="bizAreaIdList" open="(" separator="," close=")">
                                    #{item}
                                </foreach>
                            </if>
                            <if test="bankList != null and bankList.size() > 0">
                                AND
                                b.bank IN
                                <foreach item="item" index="index" collection="bankList" open="(" separator="," close=")">
                                    #{item}
                                </foreach>
                            </if>

                            AND

                            CASE WHEN #{taskStatus} = 0 THEN

                            <choose>
                                <when test="dataFlowNodeSet != null and dataFlowNodeSet.size() > 0">
                                    <foreach item="item" collection="dataFlowNodeSet" separator="OR">
                                        <choose>
                                            <when test="item == 'usertask_data_flow_contract_p2c'">
                                                pc.data_flow_contract_p2c != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_contract_p2c_review'">
                                                pc.data_flow_contract_p2c_review != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_contract_c2b'">
                                                pc.data_flow_contract_c2b != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_contract_c2b_review'">
                                                pc.data_flow_contract_c2b_review != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_p2c'">
                                                pc.data_flow_mortgage_p2c != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_p2c_review'">
                                                pc.data_flow_mortgage_p2c_review != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_c2b'">
                                                pc.data_flow_mortgage_c2b != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_c2b_review'">
                                                pc.data_flow_mortgage_c2b_review != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_b2c'">
                                                pc.data_flow_mortgage_b2c != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_b2c_review'">
                                                pc.data_flow_mortgage_b2c_review != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_c2p'">
                                                pc.data_flow_mortgage_c2p != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_c2p_review'">
                                                pc.data_flow_mortgage_c2p_review != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_register_p2c'">
                                                pc.data_flow_register_p2c != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_register_p2c_review'">
                                                pc.data_flow_register_p2c_review != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_register_c2b'">
                                                pc.data_flow_register_c2b != #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_register_c2b_review'">
                                                pc.data_flow_register_c2b_review != #{taskStatus}
                                            </when>
                                        </choose>
                                    </foreach>
                                </when>
                                <otherwise>
                                    1=2
                                </otherwise>
                            </choose>

                            ELSE

                            <choose>
                                <when test="dataFlowNodeSet != null and dataFlowNodeSet.size() > 0">
                                    <foreach item="item" collection="dataFlowNodeSet" separator="OR">
                                        <choose>
                                            <when test="item == 'usertask_data_flow_contract_p2c'">
                                                pc.data_flow_contract_p2c = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_contract_p2c_review'">
                                                pc.data_flow_contract_p2c_review = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_contract_c2b'">
                                                pc.data_flow_contract_c2b = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_contract_c2b_review'">
                                                pc.data_flow_contract_c2b_review = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_p2c'">
                                                pc.data_flow_mortgage_p2c = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_p2c_review'">
                                                pc.data_flow_mortgage_p2c_review = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_c2b'">
                                                pc.data_flow_mortgage_c2b = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_c2b_review'">
                                                pc.data_flow_mortgage_c2b_review = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_b2c'">
                                                pc.data_flow_mortgage_b2c = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_b2c_review'">
                                                pc.data_flow_mortgage_b2c_review = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_c2p'">
                                                pc.data_flow_mortgage_c2p = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_mortgage_c2p_review'">
                                                pc.data_flow_mortgage_c2p_review = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_register_p2c'">
                                                pc.data_flow_register_p2c = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_register_p2c_review'">
                                                pc.data_flow_register_p2c_review = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_register_c2b'">
                                                pc.data_flow_register_c2b = #{taskStatus}
                                            </when>
                                            <when test="item == 'usertask_data_flow_register_c2b_review'">
                                                pc.data_flow_register_c2b_review = #{taskStatus}
                                            </when>
                                        </choose>
                                    </foreach>
                                </when>
                                <otherwise>
                                    1=2
                                </otherwise>
                            </choose>
                            END
                        </where>

                    )   AS tmp

                    <if test="taskStatus != 0">
                        WHERE tmp.taskStatus_1 = #{taskStatus}
                    </if>

            ) AS tmp2
            where
            CASE WHEN #{maxGroupLevel}  = 0 THEN false
            when  #{maxGroupLevel} = 1 then
            tmp2.salesmanId in
            <foreach item="item" index="index" collection="juniorIds" open="(" separator="," close=")">
                #{item}
            </foreach>
            else true end
    </select>

    <select id="subimitVisitDoorList" resultType="com.yunche.loan.domain.vo.SubimitVisitDoorVO" parameterType="com.yunche.loan.domain.param.SubimitVisitDoorParam">
      select
            door.id                                          as id,
            orders.id 									     as orderId,
            customer.name 									 as customerName,
            customer.id_card  							     as customerIdCard,
            customer.mobile                                  as customerMobile,
            car.car_type 									 as carType,
            vehicle.apply_license_plate_area                 as vehicleApplyLicensePlateArea,
            area.area_name                                   as vehicleApplyLicensePlateAreaName,
            financial.bank 									 as financialBank,
            partner.name   									 as partnerName,
            employee.name  									 as salesmanName,
            useGetSmallCarName(car.car_detail_id)            as carName,
            door.visit_date                                  as visitDate
        from
        visit_door door
        left join loan_order orders on door.order_id = orders.id
        left join loan_process process on orders.id = process.order_id
        left join loan_customer customer on customer.id = orders.loan_customer_id
        left join loan_car_info car on orders.loan_car_info_id = car.id
        left join vehicle_information vehicle on vehicle.id = orders.vehicle_information_id
        left join loan_financial_plan financial on financial.id = orders.loan_financial_plan_id
        left join loan_base_info base on base.id = orders.loan_base_info_id
        left join partner partner on partner.id = base.partner_id
        left join employee employee on employee.id = base.salesman_id
        left join base_area area on area.area_id = vehicle.apply_license_plate_area
      where
      door.status = 1 and
      case when 3 = #{maxGroupLevel} then true
      else door.receiver_id = #{loginUserId} end
      and door.id not in (select visit_door_id from legwork_reimbursement_relevance_visit )
      <if test="userName != null">
          and customer.name LIKE CONCAT('%', #{userName} ,'%')
      </if>
    </select>

    <select id="legworkReimbursementList" parameterType="com.yunche.loan.domain.param.LegworkReimbursementParam" resultType="com.yunche.loan.domain.vo.LegworkReimbursementVO">
        select
            id              as id,
            trans_fee       as transFee,
            hotel_fee       as hotelFee,
            eat_fee         as eatFee,
            busi_fee        as busiFee,
            other_fee       as otherFee,
            apply_user_id   as gmtUser,
            apply_user_name as gmtUserName,
            DATE_FORMAT(gmt_create_time,'%Y-%m-%d %H:%i:%S') as gmtCreate,
            gmt_update_time as gmtUpdateTime,
            status          as taskStatus
        from legwork_reimbursement
            where 1=1
            and case when 3 = #{maxGroupLevel} then true
            else apply_user_id = #{loginUserId} end
            and
            case when #{taskDefinitionKey} = 'usertask_outworker_cost_apply' then
                      case
                           when #{taskStatus} = 0 then true
                           when #{taskStatus} = 1 then status = #{taskStatus}
                           when #{taskStatus} = 2 then status = #{taskStatus}
                           when #{taskStatus} = 3 then status = #{taskStatus}
                           when #{taskStatus} = 4 then status = #{taskStatus}
                      else false end
                 when #{taskDefinitionKey} = 'usertask_outworker_cost_apply_review' then
                      case
                           when #{taskStatus} = 0 then true
                           when #{taskStatus} = 1 then status = #{taskStatus}
                           when #{taskStatus} = 2 then status = #{taskStatus}
                           when #{taskStatus} = 3 then status = #{taskStatus}
                           when #{taskStatus} = 4 then status = #{taskStatus}
                      else false end
                 else false end
        <if test="customerName!=null and customerName!=''">
                and
                case when #{customerName} in
                (
                select customer.name
                from legwork_reimbursement_relevance_visit relevance
                left join visit_door door on door.id = relevance.visit_door_id
                left join loan_order orders on orders.id = door.order_id
                left join loan_customer customer on customer.id = orders.loan_customer_id
                )
                then true else false end
            </if>
            <if test="bank !=null and bank!=''">
                and
                case when #{bank} in
                (
                select plan.bank
                from legwork_reimbursement_relevance_visit relevance
                left join visit_door door on door.id = relevance.visit_door_id
                left join loan_order orders on orders.id = door.order_id
                left join loan_financial_plan plan on orders.loan_financial_plan_id = plan.id
                )
                then true else false end
            </if>
            <if test="partnerId != null and partnerId != ''">
                and
                case when #{partnerId} in
                (
                select partner.id
                from legwork_reimbursement_relevance_visit relevance
                left join visit_door door on door.id = relevance.visit_door_id
                left join loan_order orders on orders.id = door.order_id
                left join loan_base_info base on base.id = orders.loan_base_info_id
                left join partner partner on base.partner_id = partner.id
                )
                then true else false end
            </if>
            <if test="salesmanName != null and salesmanName != ''">
                and
                case when #{salesmanName} in
                (
                select employee.name
                from legwork_reimbursement_relevance_visit relevance
                left join visit_door door on door.id = relevance.visit_door_id
                left join loan_order orders on orders.id = door.order_id
                left join loan_base_info base on base.id = orders.loan_base_info_id
                left join employee employee on employee.id = base.salesman_id
                )
                then true else false end
            </if>
    </select>

    <select id="selectFlowOperationMsgList" resultType="com.yunche.loan.domain.vo.FlowOperationMsgListVO" parameterType="com.yunche.loan.domain.param.FlowOperationMsgParam">
        select
                msg.id 								            AS id,
		        msg.order_id 					                AS orderId,
        CONCAT(case when customer.name = '' or customer.name = null then '' else customer.name end,msg.title)
                                                                AS title,
		        msg.msg								            AS msg,
		        msg.sender						                AS sender,
		        msg.process_key				                    AS processKey,
		        DATE_FORMAT(msg.send_date,'%Y-%m-%d %H:%i:%S') 	AS sendDate,
		        case when DATE_FORMAT(msg.send_date,'%Y-%m-%d') is null or DATE_FORMAT(msg.send_date,'%Y-%m-%d') = '' then
                '0000-00-00'  else  DATE_FORMAT(msg.send_date,'%Y-%m-%d') end
                                                                AS chooseDate,
		        msg.read_status				                    AS readStatus,
		        msg.type					                    AS type,
		        customer.name 				                    AS customerName,
		        customer.id_card 			                    AS customerIdCard
                from flow_operation_msg msg
                    left join loan_order o on o.id = msg.order_id
                    left join loan_base_info base on o.loan_base_info_id = base.id
                    left join loan_customer customer on customer.id = o.loan_customer_id
                where 1=1
                <if test="readStatus!=null">
                    and msg.read_status = #{readStatus}
                </if>
                and
                CASE WHEN  #{maxGroupLevel}  = 0 THEN false
                     when  #{maxGroupLevel} = 1 then
                base.salesman_id in
                  <foreach item="item" index="index" collection="juniorIds" open="(" separator="," close=")">
                      #{item}
                  </foreach>
                else true end
                and
                    case when #{multipartType} = 1 then process_key = 'usertask_bank_credit_record' or process_key = 'usertask_social_credit_record'
                    when #{multipartType} = 2 then process_key = 'usertask_material_review' or process_key = 'usertask_telephone_verify'
                    when #{multipartType} = 3 then process_key not in ('usertask_bank_credit_record','usertask_social_credit_record','usertask_material_review','usertask_telephone_verify')
                    else false end
                and
                case when #{maxGroupLevel} = 3 then 1=1
                else 1=1
                <if test="bizAreaIdList != null and bizAreaIdList.size() > 0">
                    and
                    base.partner_id in
                    <foreach item="item" index="index" collection="bizAreaIdList" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
                <if test="bankList != null and bankList.size() > 0">
                    and
                    base.partner_id in
                    <foreach item="item" index="index" collection="bankList" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
               end
        ORDER By msg.send_date DESC
    </select>
    <select id="selectZhonganList" parameterType="com.yunche.loan.domain.query.ZhonganListQuery" resultType="com.yunche.loan.domain.vo.ZhonganListVO">
        select
        DATE_FORMAT(z.create_date,'%Y-%m-%d %H:%i:%S') as createDate,
        DATE_FORMAT(z.create_date,'%Y-%m-%d') as chooseDate,
        customer.name as customerName,
        customer.id_card as customerIdCard,
        z.customer_type as customerType,
        z.order_id as orderId,
        CONCAT('[众安征信]',case when customer.name = '' or customer.name = null then '' else customer.name end)
        as title

        from
        (
        select DISTINCT serial.* from zhongan_info serial
        inner join
        (
        select SUBSTRING_INDEX(GROUP_CONCAT(id order by create_date desc separator ','),',',1)
        as serial_no
        from zhongan_info GROUP BY id_card,order_id
        ) orderdata on orderdata.serial_no = serial.id
        ) z
        left join loan_order o on o.id = z.order_id
        left join loan_base_info base on o.loan_base_info_id = base.id
        left join loan_customer customer on customer.id = o.loan_customer_id
        and
        CASE WHEN #{maxGroupLevel} = 0 THEN false
        when #{maxGroupLevel} = 1 then
        base.salesman_id in
        <foreach item="item" index="index" collection="juniorIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        else true end
        and
        case when #{maxGroupLevel} = 3 then 1=1
        else 1=1
        <if test="bizAreaIdList != null and bizAreaIdList.size() > 0">
            and
            base.partner_id in
            <foreach item="item" index="index" collection="bizAreaIdList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="bankList != null and bankList.size() > 0">
            and
            base.bank in
            <foreach item="item" index="index" collection="bankList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        end
        where 1=1
        <if test="partnerId !=null">
            and base.partner_id = #{partnerId}
        </if>
    </select>

    <!--selectCancelTaskList-->
    <select id="selectCancelTaskList" parameterType="com.yunche.loan.domain.query.TaskListQuery" resultType="com.yunche.loan.domain.vo.TaskListVO">

        SELECT

                    #{taskDefinitionKey}                         AS taskKey,
                    useGetCurrentTask(#{taskDefinitionKey})      AS currentTask,
                    <if test="taskDefinitionKey == 'usertask_telephone_verify' ">
                        deputy.telephone_verify                   AS taskType,
                        useGetTaskTypeText(#{taskDefinitionKey}, deputy.telephone_verify, deputy.order_status)
                                                                  AS taskTypeText,
                    </if>

                      main.id                                      AS id,
                      main.id                                      AS taskId,
                      join_e.id                                    AS salesmanId,
                      join_p.id                                    AS partnerId,
                      join_b.area_id                               AS bizAreaId,
                      join_c.id                                    AS customerId,
                      join_c.name                                  AS customer,
                      DATE_FORMAT(main.gmt_create,'%Y-%m-%d %H:%i:%S')
                                                                   AS orderGmtCreate,
                      join_c.id_card                               AS idCard,
                      join_c.mobile                                AS mobile,
                      join_e.name                                  AS salesman,
                      join_b.bank                                  AS bank,
                      join_d.name                                  AS departmentName,
                      join_f.loan_amount                           AS loanAmount,
                      join_f.bank_period_principal                 AS bankPeriodPrincipal,
                      join_f.sign_rate                             AS signRate,
                      join_i.car_type                              AS carType,
                      join_h.license_plate_number                  AS licensePlateNumber,
                      join_p.name                                  AS partner,
                      join_f.loan_time                             AS loanTime,
                      join_f.down_payment_money                    AS downPaymentMoney,
                      0                                            AS overdueNum,
                      DATE_FORMAT(join_r.lend_date,'%Y-%m-%d %H:%i:%S')
                                                                   AS lendDate,
                      deputy.order_status                          AS orderStatus,
                      join_f.financial_product_name                AS financial_product_name,
                      join_f.car_price                             AS car_price,
                      join_f.each_month_repay                      AS each_month_repay,
                      DATE_FORMAT(join_bp.gmt_create,'%Y-%m-%d %H:%i:%S')
                                                                   AS paymentGtCreate,
                      deputy.telephone_verify                      AS telephoneVerifyStatus,
                      join_c.open_card_order                       AS openCardOrder,
                      useGetSmallCarName(join_i.car_detail_id)     AS carName,
                      join_i.gps_num                               AS carGpsNum,
                      join_bp.remit_amount                         AS remitAmount,
                      DATE_FORMAT(join_bp.remit_time, '%Y-%m-%d %H:%i:%S')
                                                                   AS remitTime,

                      deputy_log.user_id                           AS  approvalUserId,
                      deputy_log.user_name                         AS  approvalUserName,
                      DATE_FORMAT(deputy_log.create_time ,'%Y-%m-%d %H:%i:%S')
                                                                   AS  approvalGmtCreate,

                      complex_log.usertask_credit_apply_gmt_user_name
                                                                   AS creditMan,
                      DATE_FORMAT(complex_log.usertask_credit_apply_create_time, '%Y-%m-%d %H:%i:%S' )
                                                                   AS creditDate,
                      DATE_FORMAT(complex_log.usertask_bank_credit_record_create_time, '%Y-%m-%d %H:%i:%S' )
                                                                   AS bankCreditDate,
                      DATE_FORMAT(complex_log.usertask_social_credit_record_create_time, '%Y-%m-%d %H:%i:%S' )
                                                                   AS socialCreditDate,
                      DATE_FORMAT(complex_log.usertask_remit_review_create_time,'%Y-%m-%d %H:%i:%S')
                                                                   AS remitGmtCreate,
                      DATE_FORMAT(complex_log.usertask_loan_apply_create_time,'%Y-%m-%d %H:%i:%S')
                                                                   AS loanGmtCreate,
                      DATE_FORMAT(complex_log.usertask_telephone_verify_create_time,'%Y-%m-%d %H:%i:%S')
                                                                   AS telephoneGmtCreate,
                      DATE_FORMAT(complex_log.usertask_material_print_review_create_time,'%Y-%m-%d %H:%i:%S')
                                                                   AS printGmtCreate,
                      DATE_FORMAT(complex_log.usertask_visit_verify_create_time,'%Y-%m-%d %H:%i:%S')
                                                                   AS visitGmtCreate

              from  loan_order main
              inner join loan_process deputy               on main.id               = deputy.order_id
              left  join loan_customer join_c              on join_c.id             = main.loan_customer_id
              left  join loan_base_info join_b             on join_b.id             = main.loan_base_info_id
              left  join loan_financial_plan join_f        on join_f.id             = main.loan_financial_plan_id
              left  join loan_car_info join_i              on join_i.id             = main.loan_car_info_id
              left  join partner join_p                    on join_p.id             = join_b.partner_id
              left  join employee join_e                   on join_e.id             = join_b.salesman_id
              left  join department join_d                 on join_d.id             = join_p.department_id
              left  join vehicle_information join_h        on join_h.id             = main.vehicle_information_id
              left  join bank_lend_record join_r           on join_r.id             = main.bank_lend_record_id
              left  join remit_details join_bp             on join_bp.id            = main.remit_details_id
              left  join loan_process_log     deputy_log   on deputy_log.order_id   = main.id
              left  join current_node_manager complex_log  on complex_log.order_id  = main.id

        WHERE       deputy.order_status = 3

        <!-- 弃单 -->
        AND         deputy_log.action   = 2

        AND         deputy.cancel_task_def_key  = deputy_log.task_definition_key

        <!-- 弃单时间 -->
        <if test = "startCancelGmtCreate != null">
            AND     TO_DAYS(deputy_log.create_time) &gt;= TO_DAYS(#{startCancelGmtCreate})
        </if>
        <if test = "endCancelGmtCreate != null">
            AND     TO_DAYS(deputy_log.create_time) &lt;= TO_DAYS(#{endCancelGmtCreate})
        </if>

        <!-- 弃单节点 -->
        <if test = "taskDefinitionKey != null and taskDefinitionKey != '' ">
            AND      deputy.cancel_task_def_key  = #{taskDefinitionKey}
        </if>

        <if test="orderId != null">
            AND main.id = #{orderId}
        </if>
        <if test="customer != null and customer != ''">
            AND join_c.name LIKE CONCAT('%', #{customer} ,'%')
        </if>
        <if test="mobile != null">
            AND join_b.mobile = #{mobile}
        </if>
        <if test="idCard != null">
            AND join_c.id_card = #{idCard}
        </if>
        <if test="salesmanId != null">
            AND join_b.salesman_id = #{salesmanId}
        </if>
        <if test="bizAreaId != null">
            AND
            case
            when (select level from base_area where area_id = #{bizAreaId}) = 0 then 1=1
            when (select level from base_area where area_id = #{bizAreaId}) = 1 then join_b.area_id in (select area_id from base_area where parent_area_id = #{bizAreaId})
            when (select level from base_area where area_id = #{bizAreaId}) = 2 then join_b.area_id = #{bizAreaId}
            else 1=2
            end
        </if>
        <if test="loanBank != null">
            AND join_b.bank = #{loanBank}
        </if>
        <if test="loanAmountType != null">
            <if test="loanAmountType == 1">
                AND join_b.loan_amount = 1
            </if>
            <if test="loanAmountType == 2">
                AND join_b.loan_amount = 2
            </if>
            <if test="loanAmountType == 3">
                AND join_b.loan_amount = 3
            </if>
        </if>
        <if test="startLoanGmtCreate != null">
            AND TO_DAYS(complex_log.usertask_loan_apply_create_time) &gt;= TO_DAYS(#{startLoanGmtCreate})
        </if>
        <if test="endLoanGmtCreate != null">
            AND TO_DAYS(complex_log.usertask_loan_apply_create_time) &lt;= TO_DAYS(#{endLoanGmtCreate})
        </if>
        <if test="startCreditGmtCreate != null">
            AND TO_DAYS(complex_log.usertask_credit_apply_create_time) &gt;= TO_DAYS(#{startCreditGmtCreate})
        </if>
        <if test="endCreditGmtCreate != null">
            AND TO_DAYS(complex_log.usertask_credit_apply_create_time) &lt;= TO_DAYS(#{endCreditGmtCreate})
        </if>
        <if test="startPrintGmtCreate != null">
            AND TO_DAYS(complex_log.usertask_material_print_review_create_time) &gt;= TO_DAYS(#{startPrintGmtCreate})
        </if>
        <if test="endPrintGmtCreate != null">
            AND TO_DAYS(complex_log.usertask_material_print_review_create_time) &lt;= TO_DAYS(#{endPrintGmtCreate})
        </if>
        <if test="startRemitGmtCreate != null">
            AND TO_DAYS(complex_log.usertask_remit_review_create_time) &gt;= TO_DAYS(#{startRemitGmtCreate})
        </if>
        <if test="endRemitGmtCreate != null">
            AND TO_DAYS(complex_log.usertask_remit_review_create_time) &lt;= TO_DAYS(#{endRemitGmtCreate})
        </if>

    </select>

    <!-- selectRoleChangeHisTaskList -->
    <select id="selectRoleChangeHisTaskList" parameterType="com.yunche.loan.domain.query.TaskListQuery"
            resultType="com.yunche.loan.domain.vo.TaskListVO">

        SELECT

        a.id               					AS  id,
        c.name    				  			AS  customer,
        c.id_card   						AS  idCard,
        c.mobile   							AS  mobile,
        b.bank								AS  bank,
        b.salesman_id     				    AS  salesmanId,
        e.name             					AS  salesman,
        b.partner_id      					AS  partnerId,
        p.name             					AS  partner,
        d.name             					AS  departmentName,
        r_c_his.id             			    AS  roleChangeHisId,
        DATE_FORMAT(r_c_his.gmt_create,'%Y-%m-%d %H:%i:%S')
                                            AS  roleChangeHisCreateTime,
        r_c_his.user_id             		AS  roleChangeHisUserId,
        r_c_his.user_name             		AS  roleChangeHisUserName


        FROM        loan_cust_role_change_his	        AS r_c_his

        LEFT JOIN   loan_order           				AS a     ON	  a.id = r_c_his.order_id
        LEFT JOIN   loan_process         				AS pc    ON   a.id = pc.order_id
        LEFT JOIN   loan_customer        				AS c     ON   c.id = a.loan_customer_id
        LEFT JOIN   loan_base_info      				AS b     ON   b.id = a.loan_base_info_id
        LEFT JOIN   employee             				AS e     ON   e.id = b.salesman_id
        LEFT JOIN   department           				AS d     ON	  d.id = e.department_id
        LEFT JOIN   partner             				AS p     ON   p.id = b.partner_id
        LEFT JOIN   current_node_manager                AS complex_log on complex_log.order_id = a.id

        <where>
            <if test="orderId != null and orderId != '' ">
                AND a.id = #{orderId}
            </if>
            <if test="customer != null and customer != '' ">
                AND	c.name LIKE CONCAT('%', #{customer}, '%')
            </if>
            <if test="idCard != null and idCard != '' ">
                AND c.id_card = #{idCard}
            </if>
            <if test="loanBank != null and loanBank != '' ">
                AND b.bank = #{loanBank}
            </if>
            <if test="partnerId != null">
                AND p.id = #{partnerId}
            </if>
            <if test="startPrintGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_remit_review_create_time) &gt;= TO_DAYS(#{startPrintGmtCreate})
            </if>
            <if test="endPrintGmtCreate != null">
                AND TO_DAYS(complex_log.usertask_remit_review_create_time) &lt;= TO_DAYS(#{endPrintGmtCreate})
            </if>
            <if test="dataFlowTypeList != null and dataFlowTypeList.size() > 0">
                AND  df.type IN
                <foreach item="item" collection="dataFlowTypeList" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="bizAreaIdList != null and bizAreaIdList.size() > 0">
                AND
                b.partner_id IN
                <foreach item="item" index="index" collection="bizAreaIdList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="bankList != null and bankList.size() > 0">
                AND
                b.bank IN
                <foreach item="item" index="index" collection="bankList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>

        ORDER BY r_c_his.gmt_create DESC

    </select>

</mapper>